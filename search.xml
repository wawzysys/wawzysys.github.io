<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>&#39;sublime&#39;</title>
      <link href="/post/3e496c55.html"/>
      <url>/post/3e496c55.html</url>
      
        <content type="html"><![CDATA[<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>ctrl + b<br>ctrl + alt + b<br>ctrl + s<br>ctrl + n</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>配色方案<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311154302.png" alt="20240311154302"><br>主题<br><img src="/image.png" alt="alt text"><br>字体<code>Fira Cod</code><br>首选项-设置-复制<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311154630.png" alt="20240311154630"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>&quot;ignored_packages&quot;:<br>[<br>],<br>&quot;font_face&quot;: &quot;Fira Code&quot;,<br>/*&quot;font_size&quot;: 12,*/<br>&quot;theme&quot;: &quot;Seti Monokai.sublime-theme&quot;,<br>&quot;color_scheme&quot;: &quot;Packages/Theme - Seti Monokai/scheme/Seti Monokai.tmTheme&quot;,<br>&quot;dark_color_scheme&quot;: &quot;Monokai.sublime-color-scheme&quot;,<br>&quot;light_color_scheme&quot;: &quot;Breakers.sublime-color-scheme&quot;,<br><br>&quot;sublime_merge_path&quot;: &quot;D:\\Sublime Text\\Sublime Merge\\sublime_merge.exe&quot;,<br><br><br>&quot;auto_complete&quot;: true,<br>&quot;auto_mathch_enabled&quot;: false,<br>/*&quot;color_scheme&quot;: &quot;Packages/User/SublimeLinter/Monokai (SL).tmTheme&quot;,*/<br>/*&quot;font_size&quot;: 12,*/<br>/*&quot;ignored_packages&quot;:<br>[<br>&quot;Vintage&quot;<br>],*/<br>// &quot;auto_complete_triggers&quot;: <br>// [ <br>// &#123;&quot;selector&quot;: &quot;text.html&quot;, &quot;characters&quot;: &quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.&lt;&quot;,&#125;,<br>// &#123;&quot;selector&quot;: &quot;text.plain&quot;, &quot;characters&quot;: &quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.&lt;&quot;,&#125; <br>// ],<br><br>&quot;index_files&quot;: true,<br>&quot;font_size&quot;: 14,<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h2><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>    &quot;cmd&quot;: [&quot;E:/Anaconda/envs/test2/python.exe&quot;, &quot;-u&quot;, &quot;$file&quot;],<br>    &quot;selector&quot;: &quot;source.python&quot;,<br>    &quot;file_regex&quot;: &quot;^[ ]*File \&quot;(...*?)\&quot;, line ([0-9]*)&quot;,<br>    &quot;quiet&quot;: true<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>需要手动更改class名字，目前结果方法没找到。写个模版改一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br></code></pre></td></tr></table></figure><h2 id="FastOlympicCoding"><a href="#FastOlympicCoding" class="headerlink" title="FastOlympicCoding"></a>FastOlympicCoding</h2><h3 id="更改python解释器"><a href="#更改python解释器" class="headerlink" title="更改python解释器"></a>更改python解释器</h3><p>  更改的是<code>ctrl + alt + b</code>的解释环境</p><ul><li>可以看出下方的和右侧不一样，</li><li>这是因为在Sublime Text的默认设置中，Ctrl + B通常用于触发当前激活的构建系统,是之前设置的’test2’</li><li><code>ctrl + alt + b</code>是<code>FastOlympicCoding</code>运行的默认环境python。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240205175833.png" alt="20240205175833"><br><strong>这和本地的环境是一一对应的</strong><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240205180443.png" alt="20240205180443"></p><ul><li>1 先按照下图打开：<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240205175324.png" alt="20240205175324"></li><li>2找到<code>python</code></li><li>3把<code>&quot;run_cmd&quot;: &quot;python \&quot;&#123;source_file&#125;\&quot;</code>中的<code>python</code>改为自己想要的解释器路径，如下图<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240205175358.png" alt="20240205175358"><br>更改完毕结果如下<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240205180536.png" alt="20240205180536"></li></ul><h3 id="sublime-配置java环境"><a href="#sublime-配置java环境" class="headerlink" title="sublime 配置java环境"></a>sublime 配置java环境</h3><ul><li>下载jdk和前文配置<code>vscode</code></li><li>新建编译系统<br>工具-编译系统-新建编译系统-复制进去-保存为<code>java.sublime-build</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>    &quot;cmd&quot;: [&quot;javac&quot;, &quot;$file_name&quot;, &quot;&amp;&amp;&quot;, &quot;start&quot;,&quot;cmd&quot;, &quot;/k&quot;, &quot;java&quot;, &quot;$file_base_name&quot;],<br>    &quot;shell&quot;: true,<br>    &quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,<br>    &quot;working_dir&quot;: &quot;$file_path&quot;,<br>    &quot;selector&quot;: &quot;source.java&quot;,<br>    &quot;encoding&quot;: &quot;GBK&quot;,<br>    &quot;variants&quot;: [<br>        &#123;<br>            &quot;name&quot;: &quot;Terminal&quot;,<br>            &quot;cmd&quot;: [&quot;javac&quot;, &quot;$file_name&quot;, &quot;&amp;&amp;&quot;, &quot;start&quot;,&quot;cmd&quot;, &quot;/k&quot;, &quot;java&quot;, &quot;$file_base_name&quot;],<br>            &quot;shell_cmd&quot;: &quot;&quot;,<br>        &#125;,<br>        &#123;<br>            &quot;name&quot;: &quot;Build&quot;,<br>            &quot;quiet&quot;: true,<br>            &quot;shell_cmd&quot;: &quot;javac $file_name &amp;&amp; java $file_base_name &amp;&amp; del $file_base_name.class&quot;,<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="sublime添加代码模板记得空出class位置"><a href="#sublime添加代码模板记得空出class位置" class="headerlink" title="sublime添加代码模板记得空出class位置"></a>sublime添加代码模板记得空出class位置</h3><p>工具-插件开发-新建代码片段-复制代码-保存为-“jm.sublime-snippet”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;snippet&gt;<br>    &lt;content&gt;&lt;![CDATA[<br>//$TM_FILEPATH<br>import java.io.*;<br>import java.util.StringTokenizer;<br>import java.util.Scanner;<br>public class $&#123;1:&#125; &#123;<br>    public static Reader in;<br>    public static PrintWriter out;<br>    public static void main(String[] args) &#123;<br>        out = new PrintWriter(new BufferedOutputStream(System.out));<br>        in = new Reader();<br>        int t = in.nextInt();<br>        while (t-- &gt; 0)<br>            solve();<br>        out.close();<br>    &#125;<br>    static void solve()&#123;<br>        int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();<br>        char[][] c = new char[n][m];<br>        for (int i = 0; i &lt; n; i++) &#123;<br>            c[i] = in.nextLine().toCharArray();<br>        &#125;<br>    &#125;<br> <br>    static class Reader &#123;<br>        private BufferedReader br;<br>        private StringTokenizer st;<br> <br>        Reader() &#123;<br>            br = new BufferedReader(new InputStreamReader(System.in));<br>        &#125;<br> <br>        boolean hasNext()&#123;<br>            try &#123;<br>                while (st == null || !st.hasMoreElements()) &#123;<br>                    st = new StringTokenizer(br.readLine());<br>                &#125;<br>            &#125;catch (Exception e)&#123;<br>                return false;<br>            &#125;<br>            return true;<br>        &#125;<br> <br>        String next() &#123;<br>            try &#123;<br>                while (st == null || !st.hasMoreTokens()) &#123;<br>                    st = new StringTokenizer(br.readLine());<br>                &#125;<br>            &#125; catch (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            return st.nextToken();<br>        &#125;<br> <br>        int nextInt() &#123;<br>            return Integer.parseInt(next());<br>        &#125;<br> <br>        int[] nextIntArray(int n) &#123;<br>            int[] arr = new int[n];<br>            for (int i = 0; i &lt; n; i++)<br>                arr[i] = nextInt();<br>            return arr;<br>        &#125;<br> <br>        long[] nextLongArray(int n) &#123;<br>            long[] arr = new long[n];<br>            for (int i = 0; i &lt; n; i++)<br>                arr[i] = nextLong();<br>            return arr;<br>        &#125;<br> <br>        long nextLong() &#123;<br>            return Long.parseLong(next());<br>        &#125;<br> <br>        String nextLine() &#123;<br>            String s = &quot;&quot;;<br>            try &#123;<br>                s = br.readLine();<br>            &#125; catch (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            return s;<br>        &#125;<br>    &#125;<br>&#125;<br>]]&gt;&lt;/content&gt;<br>    &lt;tabTrigger&gt;jp&lt;/tabTrigger&gt;<br>&lt;/snippet&gt;<br><br></code></pre></td></tr></table></figure><p>输入<code>jp</code>(自己设置的)就可以出现代码模板<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311153911.png" alt="20240311153911"></p>]]></content>
      
      
      
        <tags>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java1</title>
      <link href="/post/eb7e46a9.html"/>
      <url>/post/eb7e46a9.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="vscode配置java"><a href="#vscode配置java" class="headerlink" title="vscode配置java"></a>vscode配置java</h3><ul><li>下载jdk，笔者下载的是jdk15.0.1<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311145620.png" alt="20240311145620"><br>下载完之后安装即可</li><li>环境变量配置<br>打开系统环境变量-点击环境变量-点击系统变量的path-编辑-新建，添加刚刚的安装目录的<code>bin</code>和<code>jre\bin</code><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311145829.png" alt="20240311145829"><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150012.png" alt="20240311150012"><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150158.png" alt="20240311150158"></li><li>查看配置正确<br><code>win+r</code>输入<code>cmd</code>,输入<code>java -version</code> 和 <code>javac -version</code>，如果出现下图所示配置正确<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150420.png" alt="20240311150420"></li><li>下载vscode的java插件</li><li>编写程序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// import java.util.*;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150528.png" alt="20240311150528"></li><li>可以在<code>.gitignore</code>中添加运行生成的<code>.class</code>文件<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150747.png" alt="20240311150747"></li></ul><h3 id="sublime-配置java环境"><a href="#sublime-配置java环境" class="headerlink" title="sublime 配置java环境"></a>sublime 配置java环境</h3><ul><li>下载jdk和前文配置<code>vscode</code></li><li>新建编译系统<br>工具-编译系统-新建编译系统-复制进去-保存为<code>java.sublime-build</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>    &quot;cmd&quot;: [&quot;javac&quot;, &quot;$file_name&quot;, &quot;&amp;&amp;&quot;, &quot;start&quot;,&quot;cmd&quot;, &quot;/k&quot;, &quot;java&quot;, &quot;$file_base_name&quot;],<br>    &quot;shell&quot;: true,<br>    &quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,<br>    &quot;working_dir&quot;: &quot;$file_path&quot;,<br>    &quot;selector&quot;: &quot;source.java&quot;,<br>    &quot;encoding&quot;: &quot;GBK&quot;,<br>    &quot;variants&quot;: [<br>        &#123;<br>            &quot;name&quot;: &quot;Terminal&quot;,<br>            &quot;cmd&quot;: [&quot;javac&quot;, &quot;$file_name&quot;, &quot;&amp;&amp;&quot;, &quot;start&quot;,&quot;cmd&quot;, &quot;/k&quot;, &quot;java&quot;, &quot;$file_base_name&quot;],<br>            &quot;shell_cmd&quot;: &quot;&quot;,<br>        &#125;,<br>        &#123;<br>            &quot;name&quot;: &quot;Build&quot;,<br>            &quot;quiet&quot;: true,<br>            &quot;shell_cmd&quot;: &quot;javac $file_name &amp;&amp; java $file_base_name &amp;&amp; del $file_base_name.class&quot;,<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="sublime添加代码模板记得空出class位置"><a href="#sublime添加代码模板记得空出class位置" class="headerlink" title="sublime添加代码模板记得空出class位置"></a>sublime添加代码模板记得空出class位置</h3><p>工具-插件开发-新建代码片段-复制代码-保存为-“jm.sublime-snippet”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;snippet&gt;<br>    &lt;content&gt;&lt;![CDATA[<br>//$TM_FILEPATH<br>import java.io.*;<br>import java.util.StringTokenizer;<br>import java.util.Scanner;<br>public class $&#123;1:&#125; &#123;<br>    public static Reader in;<br>    public static PrintWriter out;<br>    public static void main(String[] args) &#123;<br>        out = new PrintWriter(new BufferedOutputStream(System.out));<br>        in = new Reader();<br>        int t = in.nextInt();<br>        while (t-- &gt; 0)<br>            solve();<br>        out.close();<br>    &#125;<br>    static void solve()&#123;<br>        int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();<br>        char[][] c = new char[n][m];<br>        for (int i = 0; i &lt; n; i++) &#123;<br>            c[i] = in.nextLine().toCharArray();<br>        &#125;<br>    &#125;<br> <br>    static class Reader &#123;<br>        private BufferedReader br;<br>        private StringTokenizer st;<br> <br>        Reader() &#123;<br>            br = new BufferedReader(new InputStreamReader(System.in));<br>        &#125;<br> <br>        boolean hasNext()&#123;<br>            try &#123;<br>                while (st == null || !st.hasMoreElements()) &#123;<br>                    st = new StringTokenizer(br.readLine());<br>                &#125;<br>            &#125;catch (Exception e)&#123;<br>                return false;<br>            &#125;<br>            return true;<br>        &#125;<br> <br>        String next() &#123;<br>            try &#123;<br>                while (st == null || !st.hasMoreTokens()) &#123;<br>                    st = new StringTokenizer(br.readLine());<br>                &#125;<br>            &#125; catch (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            return st.nextToken();<br>        &#125;<br> <br>        int nextInt() &#123;<br>            return Integer.parseInt(next());<br>        &#125;<br> <br>        int[] nextIntArray(int n) &#123;<br>            int[] arr = new int[n];<br>            for (int i = 0; i &lt; n; i++)<br>                arr[i] = nextInt();<br>            return arr;<br>        &#125;<br> <br>        long[] nextLongArray(int n) &#123;<br>            long[] arr = new long[n];<br>            for (int i = 0; i &lt; n; i++)<br>                arr[i] = nextLong();<br>            return arr;<br>        &#125;<br> <br>        long nextLong() &#123;<br>            return Long.parseLong(next());<br>        &#125;<br> <br>        String nextLine() &#123;<br>            String s = &quot;&quot;;<br>            try &#123;<br>                s = br.readLine();<br>            &#125; catch (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            return s;<br>        &#125;<br>    &#125;<br>&#125;<br>]]&gt;&lt;/content&gt;<br>    &lt;tabTrigger&gt;jp&lt;/tabTrigger&gt;<br>&lt;/snippet&gt;<br><br></code></pre></td></tr></table></figure><p>输入<code>jp</code>(自己设置的)就可以出现代码模板<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311153902.png" alt="20240311153902"></p><h2 id="数据结构常用"><a href="#数据结构常用" class="headerlink" title="数据结构常用"></a>数据结构常用</h2><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;<span class="hljs-type">int</span>[]&gt;[] g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[N]; <span class="hljs-comment">// 邻接表</span><br>Arrays.setAll(g, i -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br></code></pre></td></tr></table></figure><p><strong>List&lt;int[]&gt;[]:</strong></p><ul><li>这是一个数组，每个元素都是可以存储整数数组(int[])的list。</li><li>数组的大小在初始化时固定，并且在其生命周期中不能更改。</li><li>这种结构允许通过索引直接访问列表，访问时间为O(1)。</li></ul><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">5</span>];<br>Arrays.fill(dist, Integer.MAX_VALUE );<br></code></pre></td></tr></table></figure><h3 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Deque&lt;Integer&gt; q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h3 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Reader in;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mian</span><span class="hljs-params">(String[] args)</span>&#123;<br>    in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reader</span>();<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reader</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BufferedReader br;<br>    <span class="hljs-keyword">private</span> StringTokenizer st;<br><br>    Reader() &#123;<br>        br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (st == <span class="hljs-literal">null</span> || !st.hasMoreElements()) &#123;<br>                st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(br.readLine());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    String <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (st == <span class="hljs-literal">null</span> || !st.hasMoreTokens()) &#123;<br>                st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(br.readLine());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> st.nextToken();<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">nextInt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Integer.parseInt(next());<br>    &#125;<br><br>    <span class="hljs-type">int</span>[] nextIntArray(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            arr[i] = nextInt();<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br><br>    <span class="hljs-type">long</span>[] nextLongArray(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">long</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            arr[i] = nextLong();<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">nextLong</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Long.parseLong(next());<br>    &#125;<br><br>    String <span class="hljs-title function_">nextLine</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            s = br.readLine();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/post/518e617c.html"/>
      <url>/post/518e617c.html</url>
      
        <content type="html"><![CDATA[<h2 id="建立第二个github-page"><a href="#建立第二个github-page" class="headerlink" title="建立第二个github page"></a>建立第二个github page</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">https://wawzysys.github.io/blog2/<br></code></pre></td></tr></table></figure><h2 id="sshbug"><a href="#sshbug" class="headerlink" title="sshbug"></a>ssh<code>bug</code></h2><p>不知道为什么只有pigcha才能连接成功，clash代理不显示ssh。https都没有问题。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/post/d87f7e0c.html"/>
      <url>/post/d87f7e0c.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]<br><code>print</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* CSS */</span><br><span class="hljs-keyword">@import</span> url(<span class="hljs-attribute">https</span>://cdn.jsdelivr.net/npm/firacode@<span class="hljs-number">6.2</span>.<span class="hljs-number">0</span>/distr/fira_code.css);<br><br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-id">#site-title</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">8vh</span><span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">text-shadow</span>:<span class="hljs-number">5px</span> <span class="hljs-number">2px</span> <span class="hljs-number">6px</span> <span class="hljs-number">#000</span><span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">font-family</span>:Fira Code<span class="hljs-meta">!important</span><br>&#125;<br><span class="hljs-selector-tag">span</span><span class="hljs-selector-id">#subtitle</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3vh</span><span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">text-shadow</span>:<span class="hljs-number">5px</span> <span class="hljs-number">2px</span> <span class="hljs-number">6px</span> <span class="hljs-number">#000</span><span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">font-family</span>:Fira Code<span class="hljs-meta">!important</span><br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-id">#site-name</span> &#123;<br>  <span class="hljs-attribute">text-shadow</span>:<span class="hljs-number">5px</span> <span class="hljs-number">2px</span> <span class="hljs-number">6px</span> <span class="hljs-number">#000</span><span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">font-family</span>:Fira Code<span class="hljs-meta">!important</span><br>&#125;<br><br><span class="hljs-selector-id">#article-container</span> pre, <span class="hljs-selector-id">#article-container</span> <span class="hljs-selector-tag">code</span> &#123;<br>  <span class="hljs-attribute">font-family</span>:Fira Code<span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.article-title</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: bolder;<br>  <span class="hljs-attribute">font-family</span>:Fira Code<span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/post/b9ebdeb8.html"/>
      <url>/post/b9ebdeb8.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">bisect_left:&gt;=<br>bisect_right:&gt;<br></code></pre></td></tr></table></figure><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = defaultdict(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># 设置无限大</span><br><span class="hljs-built_in">dict</span> = defaultdict(inf) <br></code></pre></td></tr></table></figure><h2 id="SortedDict"><a href="#SortedDict" class="headerlink" title="SortedDict"></a>SortedDict</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = defaultdict(SortedDict)<br></code></pre></td></tr></table></figure><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> row <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> grid):<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><span class="hljs-comment"># 检查列表中是否有真值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>([<span class="hljs-number">0</span>, <span class="hljs-literal">False</span>, <span class="hljs-number">5</span>]))  <span class="hljs-comment"># True，因为5是真值</span><br><br><span class="hljs-comment"># 空列表中没有真值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>([]))  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># 字典在使用any时会检查键而不是值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>(&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&quot;False&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;True&quot;</span>&#125;))  <span class="hljs-comment"># True，因为有一个真键1</span><br><br><span class="hljs-comment"># 空字典</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>(&#123;&#125;))  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># 检查列表中是否存在大于5的元素</span><br>nums = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>(n &gt; <span class="hljs-number">5</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#二位数组</span><br><span class="hljs-keyword">import</span> copy<br>pre_grid = copy.deepcopy(grid)<span class="hljs-comment">##pre_grid 和 grid两者独立</span><br>pre_grid = grid <span class="hljs-comment">##两者不独立</span><br>pre_grid = grid.copy() <span class="hljs-comment">##两者不独立</span><br><span class="hljs-comment"># 使用.copy()方法对列表进行浅复制（shallow copy）时，这个方法只会创建列表</span><br><span class="hljs-comment"># 本身的一个新的副本，但是不会对列表中的子列表（即列表中的列表）进行深度复制。</span><br><span class="hljs-comment"># 这意味着，如果原始列表中包含了其他列表（如二维数组或矩阵），那么新列表和原</span><br><span class="hljs-comment"># 始列表中的子列表仍然是相同的对象（即它们在内存中的地址是相同的）。</span><br><span class="hljs-comment"># 因此，当您修改grid中的任何元素时，pre_color中相应的子列表元素也会被修改，</span><br><span class="hljs-comment"># 因为它们实际上是指向同一块内存地址。</span><br><br></code></pre></td></tr></table></figure><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a_copy = a.copy()<span class="hljs-comment">#两者独立 </span><br>a_copy = a[:]<span class="hljs-comment">#两者独立 使用切片</span><br>a_copy = a<span class="hljs-comment">#两者不独立</span><br><span class="hljs-comment">#对于一维数组（列表），可以使用 .copy() 方法或切片操作 [:] 来创建一个浅复制。</span><br><span class="hljs-comment"># 对于一维数组，这两种方法都能有效地复制数组，因为一维数组不包含嵌套的列表，</span><br><span class="hljs-comment"># 所以“浅复制”已经足够用于创建一个完全独立的副本</span><br><span class="hljs-comment"># 修改副本中的元素不会影响原始数组。</span><br></code></pre></td></tr></table></figure><h2 id="可变对象"><a href="#可变对象" class="headerlink" title="可变对象"></a>可变对象</h2><ul><li>可变对象（如列表、字典、集合等）则表现出“按引用传递”的特性。</li><li>因为函数接收的参数是对象的引用，所以如果你在函数内部修改了一个可变对象（例如，添加、删除或者修改列表中的元素），</li><li>那么这些修改会反映到原始对象上，因为实际上你和函数内部操作的是同一个对象。</li></ul><h2 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h2><ul><li>不可变对象（如<strong>整数、浮点数、字符串、元组</strong>等）看起来像是“按值传递”，因为它们的值不能被修改。</li><li>如果你在函数内部试图改变一个不可变对象的值，实际上会创建一个新的对象，并将其绑定到函数内部的局部变量名上，而原始对象不会受到影响。</li></ul><h2 id="def-函数参数"><a href="#def-函数参数" class="headerlink" title="def 函数参数"></a>def 函数参数</h2><p>在Python中，所有的<em><strong>函数参数</strong></em>传递都可以视为“按对象引用传递”（pass by object reference）。这意味着函数内部接收到的是实际参数对象的引用，而不是对象的副本。这种传递方式的效果取决于对象本身是可变的（mutable）还是不可变的（immutable）。</p><h3 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">area = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">area</span>):<br>    area += <span class="hljs-number">1</span><br>fun(area)<br><span class="hljs-built_in">print</span>(area) <br><span class="hljs-comment"># 0</span><br><span class="hljs-comment">#area 不可变 </span><br><span class="hljs-comment">#函数fun中的area是一个局部变量，它仅在函数作用域内有效。尽管它与全局变量area同名，但它实际上是一个完全不同的变量。在fun函数内部修改area时，实际上是在修改这个局部变量，而不是全局变量area。因此，全局变量area的值不会因为调用fun函数而改变。</span><br></code></pre></td></tr></table></figure><h3 id="Python中函数参数如何按引用传递（对于可变对象而言）"><a href="#Python中函数参数如何按引用传递（对于可变对象而言）" class="headerlink" title="Python中函数参数如何按引用传递（对于可变对象而言）"></a>Python中函数参数如何按引用传递（对于可变对象而言）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">area[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">area</span>):<br>    area[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>fun(area)<br><span class="hljs-built_in">print</span>(area[<span class="hljs-number">0</span>]) <br><span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h3 id="不可变对象-global"><a href="#不可变对象-global" class="headerlink" title="不可变对象 + global"></a>不可变对象 + global</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">area = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-keyword">global</span> area  <span class="hljs-comment"># 指明我们打算修改的是全局变量area</span><br>    area += <span class="hljs-number">1</span><br>fun()<br><span class="hljs-built_in">print</span>(area)  <br><span class="hljs-comment"># 结果将是1，因为fun函数被调用，全局变量area被修改</span><br><br></code></pre></td></tr></table></figure><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><ul><li>使用<code>global</code>关键字在函数内部<strong>声明全局变量</strong>。</li><li>当在函数内部修改全局变量时，如果不使用<code>global</code>关键字，</li><li><code>Python</code>将会创建一个新的局部变量，而不是修改外部的全局变量。</li><li>通过使用<code>global</code>关键字，可以明确指示Python在函数内部对全局变量进行修改。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">5</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-keyword">global</span> x  <span class="hljs-comment"># 指明我们要修改的是全局变量x</span><br>    x = <span class="hljs-number">10</span><br>func()<br><span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 输出将是10，因为全局变量x被修改了</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h3><ul><li><code>nonlocal</code>关键字用于在嵌套函数中声明非局部变量（即不属于这个函数，但也不是全局的变量）。</li><li>这通常用于在嵌套函数中修改封闭作用域（enclosing scope，即嵌套函数外部的另一个函数内部）的变量。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    x = <span class="hljs-number">5</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-keyword">nonlocal</span> x  <span class="hljs-comment"># 指明我们要修改的是封闭作用域中的变量x</span><br>        x = <span class="hljs-number">10</span><br>    inner()<br>    <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 输出将是10，因为封闭作用域中的变量x被修改了</span><br>outer()<br><br></code></pre></td></tr></table></figure><h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><p><code>global</code>和<code>nonlocal</code>关键主要用于复杂的场景，比如需要在多层嵌套的函数中修改外部变量的值。然而，过度使用这些关键字可能会导致代码难以理解和维护，因此应该谨慎使用。<br>如果可以通过其他方式（如返回值、类属性等）来实现相同的功能，通常这些方式会更加清晰和优雅。</p><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><p>在Python中，嵌套函数可以访问其外部函数（父函数）作用域内的所有变量，无论这些变量是可变的还是不可变的。这种特性是由于Python的作用域和闭包的概念所决定的。当你在一个函数内定义另一个函数时，内部的函数（嵌套函数）可以访问外部函数的局部变量。</p><h3 id="访问不可变变量"><a href="#访问不可变变量" class="headerlink" title="访问不可变变量"></a>访问不可变变量</h3><p>嵌套函数可以读取外部函数中定义的不可变变量（如整数、字符串、元组等），但不能直接修改它们。如果尝试修改，Python会在嵌套函数的局部作用域内创建一个同名的新变量，而不是修改外部函数的变量。这是因为不可变变量不能被更改，只能被替换。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">Copy code<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    x = <span class="hljs-number">3</span>  <span class="hljs-comment"># 不可变变量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 可以访问外部函数的变量x</span><br>    inner()<br><br>outer()<br></code></pre></td></tr></table></figure><h3 id="修改可变变量"><a href="#修改可变变量" class="headerlink" title="修改可变变量"></a>修改可变变量</h3><p>对于可变变量（如列表、字典等），嵌套函数可以修改这些变量的内容，因为可变变量允许原地修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">Copy code<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]  <span class="hljs-comment"># 可变变量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        lst.append(<span class="hljs-number">4</span>)  <span class="hljs-comment"># 修改外部函数的变量lst</span><br>    inner()<br>    <span class="hljs-built_in">print</span>(lst)<br><br>outer()<br></code></pre></td></tr></table></figure><h3 id="使用nonlocal关键字"><a href="#使用nonlocal关键字" class="headerlink" title="使用nonlocal关键字"></a>使用nonlocal关键字</h3><p>如果需要在嵌套函数中修改外部函数的不可变变量，可以使用nonlocal关键字。这样做可以明确地告诉Python解释器你打算修改的是嵌套作用域中的变量，而不是创建一个新的局部变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">python<br>Copy code<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    x = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-keyword">nonlocal</span> x<br>        x = <span class="hljs-number">5</span>  <span class="hljs-comment"># 修改的是外部函数的变量x</span><br>    inner()<br>    <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 输出5</span><br><br>outer()<br></code></pre></td></tr></table></figure><p>在这个示例中，nonlocal关键字使得inner函数能够修改外部函数outer中定义的不可变变量x的值。<br>总结来说，嵌套函数能够访问父函数中定义的所有变量，无论它们是可变的还是不可变的。但要修改不可变变量，需要使用nonlocal关键字。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>修改不可变复杂一点……<br>修改可变，不用加入函数参数直接改！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modify_list</span>():<br>    my_list.append(<span class="hljs-number">4</span>)<br><br>modify_list()<br><span class="hljs-built_in">print</span>(my_list)  <span class="hljs-comment"># 输出 [1, 2, 3, 4]</span><br><br></code></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a><code>lambda</code></h3><p>在python种,<code>lambda</code>函数后面可以跟一个列表或任何其他类型的表达式。<code>lambda</code>函数是一个简单的匿名函数，可以接受任何任何数量的参数，但只有一个表达式，这个表达式的就算结果就是函数的返回值。<br>例如：</p><ul><li>排序字典的时候，lambda接受两个参数 <code>item = [k, v]</code>,然后返回一个参数<code>item[1]</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sorted_dict_by_value = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">sorted</span>(my_dict.items(), key=<span class="hljs-keyword">lambda</span> item: item[<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure></li><li>按值排序索引的时候,接受一个参数，返回一个列表里面两个参数<ul><li>这里的 lambda 函数对于每个元素 x（在这个上下文中，x 是 lst 中的一个元素，即一个索引）返回一个由两个元素组成的列表：nums[x] 和 x。</li><li>这个返回的列表用作排序的键：<ul><li>第一个元素 nums[x] 是主要的排序依据。</li><li>第二个元素 x 作为次要排序依据，确保在 nums[x] 相同的情况下，索引较小的元素排在前面。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sort_lst = <span class="hljs-built_in">sorted</span>(lst, key=<span class="hljs-keyword">lambda</span> x: [nums[x], x])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>sorted_dict = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">sorted</span>(my_dict.items()))<br><br>my_dict = &#123;<span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>sorted_dict_by_value = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">sorted</span>(my_dict.items(), key=<span class="hljs-keyword">lambda</span> item: item[<span class="hljs-number">1</span>]))<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#升序</span><br>sorted_index = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)), key = nums.__getitem__)<br><span class="hljs-comment">#升序</span><br>sorted_index = [i <span class="hljs-keyword">for</span> i, _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">enumerate</span>(nums), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])]<br><span class="hljs-comment">#升序</span><br>nums_index = [[num, i] <span class="hljs-keyword">for</span>  i, num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums)]<br>sorted_index = [i <span class="hljs-keyword">for</span> num, i <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(nums_index, key = <span class="hljs-keyword">lambda</span> x : x[<span class="hljs-number">0</span>])]<br><br><span class="hljs-comment">#根据列表nums中的值和索引对一个索引列表lst进行排序。</span><br><span class="hljs-comment">#根据nums中的值降序排序，如果有值相同，则根据索引降序排序。</span><br>n = <span class="hljs-built_in">len</span>(nums)<br>lst = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n)) <span class="hljs-comment">#创建一个从0到n-1的索引列表，这个列表将被排序。</span><br>lst.sort(key=<span class="hljs-keyword">lambda</span> x: [-nums[x], -x])<br><span class="hljs-comment">#对lst进行就地排序（即排序后的结果直接修改lst）</span><br><span class="hljs-comment">#对于lst中的每一个元素x（这里的x是一个索引），lambda函数返回一个由两部分组成的列表[-nums[x], -x]。</span><br><span class="hljs-comment">#第一关键字 -nums[x]</span><br><span class="hljs-comment">#第二关键字 -x</span><br><br><br><span class="hljs-comment">#升序</span><br>n = <span class="hljs-built_in">len</span>(nums)<br>lst = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n))<br>sort_lst = <span class="hljs-built_in">sorted</span>(lst, key = <span class="hljs-keyword">lambda</span> x: nums[x])<br><span class="hljs-comment">#sorted() 函数返回一个新列表，这个列表是按照 key 参数指定的方法排序的 lst 的副本。</span><br>sort_lst = <span class="hljs-built_in">sorted</span>(lst, key = <span class="hljs-keyword">lambda</span> x: [nums[x], x])<br></code></pre></td></tr></table></figure><ul><li><code>sort_lst = sorted(lst, key=lambda x: nums[x]):</code><br>这个表达式根据 <code>nums</code> 中每个索引 x 对应的值对 <code>lst</code> 进行排序。如果 nums 中存在相同的值，那么它们对应的索引在 <code>sort_lst</code> 中的相对顺序将按照它们在原列表 <code>lst</code> 中的顺序，也就是说，排序是稳定的。</li><li><code>sort_lst = sorted(lst, key=lambda x: [nums[x], x]):</code><br>这个表达式在排序时考虑了两个因素：首先是 nums 中每个索引 x 对应的值，其次是索引 <code>x</code> 本身。这意味着，如果 <code>nums</code> 中有两个或多个相同的值，它们将进一步按照它们的索引进行排序。这种方法确保了即使在 <code>nums</code> 中的值相等时，排序结果也是确定的，因为索引值是唯一的。</li></ul><h2 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h2><p>内置前缀和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools <br><span class="hljs-keyword">import</span> operator<br>data = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-comment"># 计算前缀和</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(itertools.accumulate(data)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(accumulate(data)))<br><span class="hljs-comment"># 计算到当前位置累积相乘得结果</span><br>data = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(itertools.accumulate(data, operator.mul, initial=<span class="hljs-number">2</span>)))<br><span class="hljs-comment"># 计算到当前位置的最大值并且输出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(itertools.accumulate(data, <span class="hljs-built_in">max</span>)))<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="/post/ab21860c.html"/>
      <url>/post/ab21860c.html</url>
      
        <content type="html"><![CDATA[<h1 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo new &quot;name&quot;<br></code></pre></td></tr></table></figure><p>这篇文章会出现在&#x2F;source&#x2F;_post&#x2F;</p><h1 id="发表page"><a href="#发表page" class="headerlink" title="发表page"></a>发表page</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo page &quot;name&quot;<br></code></pre></td></tr></table></figure><h1 id="修改完毕之后在本地查看效果"><a href="#修改完毕之后在本地查看效果" class="headerlink" title="修改完毕之后在本地查看效果"></a>修改完毕之后在本地查看效果</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo clean<br>hexo generate<br>hexo cl &amp;&amp; hexo g<br>hexo serve<br></code></pre></td></tr></table></figure><h1 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo d <br></code></pre></td></tr></table></figure><p>需要输入ssh密码</p><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="彩色标签云"><a href="#彩色标签云" class="headerlink" title="彩色标签云"></a>彩色标签云</h3><p>在<code>config.yal</code>中将<code>aside</code>中的<code>card_tags</code>的<code>enable</code>设置为<code>true</code>即可</p><h3 id="用giscus实现评论"><a href="#用giscus实现评论" class="headerlink" title="用giscus实现评论"></a>用<code>giscus</code>实现评论</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">待整理<br></code></pre></td></tr></table></figure><h3 id="实现鼠标彩色"><a href="#实现鼠标彩色" class="headerlink" title="实现鼠标彩色"></a>实现鼠标彩色</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">待整理<br></code></pre></td></tr></table></figure><h3 id="社交信息"><a href="#社交信息" class="headerlink" title="社交信息"></a>社交信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">social:</span><br>  <span class="hljs-attr">fab fa-github:</span>  <span class="hljs-string">&quot;填入github主页&quot;</span><span class="hljs-string">||</span> <span class="hljs-string">Github</span> <span class="hljs-string">||</span> <span class="hljs-string">&#x27;#24292e&#x27;</span><br>  <span class="hljs-attr">fas fa-envelope:</span>  <span class="hljs-string">mailto:&quot;邮箱&quot;</span> <span class="hljs-string">||</span> <span class="hljs-string">Email</span> <span class="hljs-string">||</span> <span class="hljs-string">&#x27;#4a7dbe&#x27;</span><br>  <span class="hljs-attr">fab fa-qq: fab fa-qq:</span> <span class="hljs-string">tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=&quot;QQ号👌&quot;&amp;website=www.oicqzone.com</span> <span class="hljs-string">||</span> <span class="hljs-string">QQ</span> <span class="hljs-string">||</span> <span class="hljs-string">&#x27;#qq-color-code&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="背景图片and渐变"><a href="#背景图片and渐变" class="headerlink" title="背景图片and渐变"></a>背景图片and渐变</h3><p><strong>⚠️：先在<code>config.butterfly.yaml</code>中将<code>backgroud</code>设一个图片 <code>url()</code><br>网上都没有这一步<br>但我试了好多次，只加个<code>css</code>不出现图片，不知道为什么</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background:  url(https://picx.zhimg.com/80/v2-7ee6f104979814d2bf420461e3872475_1440w.webp?source=1def8aca)<br>写css<br>然后inject<br></code></pre></td></tr></table></figure><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">写css<br>然后inject<br></code></pre></td></tr></table></figure><h2 id="目前还不会的"><a href="#目前还不会的" class="headerlink" title="目前还不会的"></a>目前还不会的</h2><h3 id="2024-1-11"><a href="#2024-1-11" class="headerlink" title="2024.1.11"></a>2024.1.11</h3><ul><li><input disabled="" type="checkbox"> <code>giscus</code>不会将评论顺序默认改成最新的</li><li><input disabled="" type="checkbox"> 最新留言or评论不会弄到右边</li><li><input checked="" disabled="" type="checkbox"> 将评论在某些page不显示</li><li><input checked="" disabled="" type="checkbox"> 文章背景虚化   2024.1.22完成</li></ul><h3 id="待做"><a href="#待做" class="headerlink" title="待做"></a>待做</h3><ul><li><input disabled="" type="checkbox"> <code>about</code>完善</li></ul><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><h4 id="用picgo-app："><a href="#用picgo-app：" class="headerlink" title="用picgo app："></a>用<code>picgo</code> app：</h4><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240301205606.png"><br>从粘贴板上传图片快捷键：<code>ctrl+shift+p</code></p><h4 id="用vscode-markdowm-picgo-插件"><a href="#用vscode-markdowm-picgo-插件" class="headerlink" title="用vscode + markdowm + picgo(插件)"></a>用vscode + markdowm + picgo(插件)</h4><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240123001458.png" alt="20240123001458"><br><code>cdn</code>加速<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240123001522.png" alt="20240123001522"><br>从粘贴板上传图片快捷键：<code>artl+shift+u</code></p><h4 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><code>Typora</code></h4><p>文件-&gt;偏好设置-&gt;图像</p><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240301205545.png"></p><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240301205518.png"></p><p>点击<strong>验证图片上传选项</strong>查看是否配置好</p><h3 id="git-子仓库："><a href="#git-子仓库：" class="headerlink" title="git 子仓库："></a>git 子仓库：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git">cd themes/butterfly<br>git add .<br>git commit -m &quot;update&quot;<br>cd ../../<br>git add themes/butterfly<br>git commit -m &quot;update&quot;<br>git push origin hexo<br></code></pre></td></tr></table></figure><h3 id="将ssh代理改为https"><a href="#将ssh代理改为https" class="headerlink" title="将ssh代理改为https"></a>将ssh代理改为https</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">temp<br></code></pre></td></tr></table></figure><h3 id="可以单独将public上传到github仓库，不用hexo-d"><a href="#可以单独将public上传到github仓库，不用hexo-d" class="headerlink" title="可以单独将public上传到github仓库，不用hexo d"></a>可以单独将public上传到github仓库，不用<code>hexo d</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">temp<br></code></pre></td></tr></table></figure><h3 id="副标题"><a href="#副标题" class="headerlink" title="副标题"></a>副标题</h3><p>在’_config.yaml’里面更改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">asdaso的blog</span><br><span class="hljs-attr">subtitle:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-attr">sub:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">何其荣幸</span> <span class="hljs-string">何德何能</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">所有的不平凡都来自平凡</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;cs&#x27;</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">asdaso</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="封面不显示正文"><a href="#封面不显示正文" class="headerlink" title="封面不显示正文"></a>封面不显示正文</h3><p><code>method</code>选择1表示显示介绍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">index_post_content:<br>  method: 1  #description<br>  length: 500 # if you set method to 2 or 3, the length need to config<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个博客</title>
      <link href="/post/61585.html"/>
      <url>/post/61585.html</url>
      
        <content type="html"><![CDATA[<h2 id="VSC换python内核"><a href="#VSC换python内核" class="headerlink" title="VSC换python内核"></a>VSC换python内核</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ctrl + shift + p<br>Select Interpreter<br></code></pre></td></tr></table></figure><h2 id="将mackdown转化为别的格式"><a href="#将mackdown转化为别的格式" class="headerlink" title="将mackdown转化为别的格式"></a>将mackdown转化为别的格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">下载markdown pdf 插件<br>ctrl + shife + p <br>输入 markdown pdf<br></code></pre></td></tr></table></figure><h2 id="解决markdown-pdf-不能输出latex公式问题"><a href="#解决markdown-pdf-不能输出latex公式问题" class="headerlink" title="解决markdown pdf 不能输出latex公式问题"></a>解决markdown pdf 不能输出latex公式问题</h2><p>在下面路径打开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">C://Users/<span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>/.vscode/extensions/yzane.markdown-pdf-1.4.1/template/template.html<br></code></pre></td></tr></table></figure><p>在最后的body和html之间输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;<br>&lt;script type=&quot;text/x-mathjax-config&quot;&gt; MathJax.Hub.Config(&#123; tex2jax: &#123;inlineMath: [[&#x27;$&#x27;, &#x27;$&#x27;]]&#125;, messageStyle: &quot;none&quot; &#125;);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>参考：<br><a href="https://blog.csdn.net/qq_18506419/article/details/103461825">VScode中Markdown PDF无法正确输出包含公式的pdf解决方案</a></p><h3 id="常用cmd命令"><a href="#常用cmd命令" class="headerlink" title="常用cmd命令"></a>常用cmd命令</h3><h4 id="删除-exe"><a href="#删除-exe" class="headerlink" title="删除.exe"></a>删除.exe</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">在文件下的<span class="hljs-built_in">cmd</span>输入：<br><span class="hljs-keyword">for</span> /r %i <span class="hljs-keyword">in</span> (*.exe) <span class="hljs-keyword">do</span> <span class="hljs-built_in">del</span> /q %i<br></code></pre></td></tr></table></figure><pre><code></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 计算机科学 </tag>
            
            <tag> 技术 </tag>
            
            <tag> VSCODE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
