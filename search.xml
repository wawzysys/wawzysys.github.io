<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Screenshot-taken-on-2024-05-28-16-25-49"><a href="#Screenshot-taken-on-2024-05-28-16-25-49" class="headerlink" title="Screenshot taken on 2024-05-28_16-25-49"></a>Screenshot taken on 2024-05-28_16-25-49</h1><p><img src="/./screenshot_2024-05-28_16-25-49.png" alt="Screenshot"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1 id="Screenshot-taken-on-1"><a href="#Screenshot-taken-on-1" class="headerlink" title="Screenshot taken on 1"></a>Screenshot taken on 1</h1><p><img src="/1.png" alt="Screenshot"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>model</title>
      <link href="/post/d79572d9.html"/>
      <url>/post/d79572d9.html</url>
      
        <content type="html"><![CDATA[<h3 id="pymodel"><a href="#pymodel" class="headerlink" title="pymodel"></a>pymodel</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br>sys.setrecursionlimit(<span class="hljs-number">100000</span>)<br><span class="hljs-built_in">input</span>=<span class="hljs-keyword">lambda</span>:sys.stdin.readline().strip()<br><span class="hljs-comment"># write=lambda x:sys.stdout.write(str(x)+&#x27;\n&#x27;)</span><br><span class="hljs-comment"># from decimal import Decimal</span><br><span class="hljs-comment"># from datetime import datetime,timedelta</span><br><span class="hljs-comment"># from random import randint</span><br><span class="hljs-comment"># from copy import deepcopy</span><br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># from heapq import heapify,heappush,heappop</span><br><span class="hljs-comment"># from bisect import bisect_left,bisect,insort</span><br><span class="hljs-comment"># from math import inf,sqrt,gcd,pow,ceil,floor,log,log2,log10,pi,sin,cos,tan,asin,acos,atan</span><br><span class="hljs-comment"># from functools import cmp_to_key,reduce</span><br><span class="hljs-comment"># from operator import or_,xor,add,mul</span><br><span class="hljs-comment"># from itertools import permutations,combinations,accumulate</span><br>sint = <span class="hljs-keyword">lambda</span>: <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>mint = <span class="hljs-keyword">lambda</span>: <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>lint = <span class="hljs-keyword">lambda</span>: <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>():<br>    <br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment">#t=int(input())</span><br>    <span class="hljs-comment">#for _ in range(t):</span><br>    <span class="hljs-comment">#   solve()</span><br><br>    solve()<br></code></pre></td></tr></table></figure><h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DSU</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.parent = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n))<br>        self.size = [<span class="hljs-number">1</span>] * n<br>        self.n = n<br>        self.setCount = n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">if</span> self.parent[x] != x:<br>            self.parent[x] = self.find(self.parent[x])<br>        <span class="hljs-keyword">return</span> self.parent[x]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">union</span>(<span class="hljs-params">self, x, y</span>):<br>        x, y = self.find(x), self.find(y)<br>        <span class="hljs-keyword">if</span> x == y:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> self.size[x] &lt; self.size[y]:<br>            x, y = y, x<br>        self.parent[y] = x<br>        self.size[x] += self.size[y]<br>        self.setCount -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">connected</span>(<span class="hljs-params">self, x, y</span>):<br>        x, y = self.find(x), self.find(y)<br>        <span class="hljs-keyword">return</span> x == y<br></code></pre></td></tr></table></figure><h3 id="组合数"><a href="#组合数" class="headerlink" title="组合数"></a>组合数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Factorial</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, N, mod</span>) -&gt; <span class="hljs-literal">None</span>:<br>        N += <span class="hljs-number">1</span><br>        self.mod = mod<br>        self.f = [<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br>        self.g = [<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N)]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, N):<br>            self.f[i] = self.f[i - <span class="hljs-number">1</span>] * i % self.mod<br>        self.g[-<span class="hljs-number">1</span>] = <span class="hljs-built_in">pow</span>(self.f[-<span class="hljs-number">1</span>], mod - <span class="hljs-number">2</span>, mod)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(N - <span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>            self.g[i] = self.g[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % self.mod<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fac</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-keyword">return</span> self.f[n]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">fac_inv</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-keyword">return</span> self.g[n]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">comb</span>(<span class="hljs-params">self, n, m</span>):<br>        <span class="hljs-keyword">if</span> n &lt; m <span class="hljs-keyword">or</span> m &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n &lt; <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> self.f[n] * self.g[m] % self.mod * self.g[n - m] % self.mod<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">permu</span>(<span class="hljs-params">self, n, m</span>):<br>        <span class="hljs-keyword">if</span> n &lt; m <span class="hljs-keyword">or</span> m &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n &lt; <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">return</span> self.f[n] * self.g[n - m] % self.mod<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">catalan</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-keyword">return</span> (self.comb(<span class="hljs-number">2</span> * n, n) - self.comb(<span class="hljs-number">2</span> * n, n - <span class="hljs-number">1</span>)) % self.mod<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inv</span>(<span class="hljs-params">self, n</span>):<br>        <span class="hljs-keyword">return</span> self.f[n - <span class="hljs-number">1</span>] * self.g[n] % self.mod<br></code></pre></td></tr></table></figure><h3 id="质数筛"><a href="#质数筛" class="headerlink" title="质数筛"></a>质数筛</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">pri = []<br>not_prime = [<span class="hljs-literal">False</span>] * N<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pre</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> not_prime[i]:<br>            pri.append(i)<br>        <span class="hljs-keyword">for</span> pri_j <span class="hljs-keyword">in</span> pri:<br>            <span class="hljs-keyword">if</span> i * pri_j &gt; n:<br>                <span class="hljs-keyword">break</span><br>            not_prime[i * pri_j] = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">if</span> i % pri_j == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h3 id="质因数个数"><a href="#质因数个数" class="headerlink" title="质因数个数"></a>质因数个数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">divide</span>(<span class="hljs-params">n</span>):<br>    ans = []<br>    i = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> i &lt;= n // i:<br>        <span class="hljs-keyword">if</span> n % i == <span class="hljs-number">0</span>:<br>            cnt = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> n % i == <span class="hljs-number">0</span>:<br>                cnt += <span class="hljs-number">1</span><br>                n //= i<br>            ans.append((i, cnt))<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span>:<br>        ans.append((n, <span class="hljs-number">1</span>))<br>    <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h3 id="约数之和"><a href="#约数之和" class="headerlink" title="约数之和"></a>约数之和</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-built_in">int</span>(<span class="hljs-number">1e9</span> + <span class="hljs-number">7</span>)<br>primes = &#123;&#125;<br>a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">while</span> a:<br>    a -= <span class="hljs-number">1</span><br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    i = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> i &lt;= n // i:<br>        <span class="hljs-keyword">while</span> n % i == <span class="hljs-number">0</span>:<br>            n //= i<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> primes:<br>                primes[i] += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                primes[i] = <span class="hljs-number">1</span><br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> primes:<br>            primes[n] += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            primes[n] = <span class="hljs-number">1</span><br>res = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i,val <span class="hljs-keyword">in</span> primes.items():<br>    t = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> val:<br>        val -= <span class="hljs-number">1</span><br>        t = (t * i + <span class="hljs-number">1</span>) % mod<br>    res = res * t % mod<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h3 id="约数个数"><a href="#约数个数" class="headerlink" title="约数个数"></a>约数个数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">mod = <span class="hljs-number">1e9</span> + <span class="hljs-number">7</span><br><br>primes = &#123;&#125;<br>a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">while</span> a:<br>    a -= <span class="hljs-number">1</span><br>    n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    i = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> i &lt;= n // i:<br>        <span class="hljs-keyword">while</span> n % i == <span class="hljs-number">0</span>:<br>            n //= i<br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> primes:<br>                primes[i] += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                primes[i] = <span class="hljs-number">1</span><br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> n &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> n <span class="hljs-keyword">in</span> primes:<br>            primes[n] += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            primes[n] = <span class="hljs-number">1</span><br><br>res = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> primes.values():<br>    res = <span class="hljs-built_in">int</span>(res * (i + <span class="hljs-number">1</span>) % mod)<br><span class="hljs-built_in">print</span>(res)<br></code></pre></td></tr></table></figure><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><p><img src="/image.png" alt="alt text"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>    res = a<br>    j = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> j * j &lt;= a :<br>        <span class="hljs-keyword">if</span> a % j == <span class="hljs-number">0</span>:<br>            res = res * (j - <span class="hljs-number">1</span>) // j<br>            <span class="hljs-keyword">while</span> a % j == <span class="hljs-number">0</span>:<br>                a = a // j<br>        j += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> a &gt; <span class="hljs-number">1</span>:<br>        res = res * (a - <span class="hljs-number">1</span>) // a<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(res))<br></code></pre></td></tr></table></figure><h3 id="筛法求欧拉函数"><a href="#筛法求欧拉函数" class="headerlink" title="筛法求欧拉函数"></a>筛法求欧拉函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">N = <span class="hljs-number">1000010</span><br>primes = [<span class="hljs-number">0</span>]*N<br>phi = [<span class="hljs-number">0</span>]*N<br>st = [<span class="hljs-literal">False</span>]*N<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_eulers</span>(<span class="hljs-params">n</span>):<br>    phi[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span><br>    cnt = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,n+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> st[i]:<br>            primes[cnt] = i<br>            cnt += <span class="hljs-number">1</span><br>            phi[i] = i - <span class="hljs-number">1</span><br>        j = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> primes[j] &lt;= n // i:<br>            st[primes[j] * i] = <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">if</span> i % primes[j] == <span class="hljs-number">0</span>:<br>                phi[primes[j] * i] = phi[i] * primes[j]<br>                <span class="hljs-keyword">break</span><br>            phi[primes[j] * i] = phi[i] * (primes[j] - <span class="hljs-number">1</span>)<br>            j += <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><h3 id="扩展欧几里得"><a href="#扩展欧几里得" class="headerlink" title="扩展欧几里得"></a>扩展欧几里得</h3><p><img src="/image-1.png" alt="alt text"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">extend_gcd</span>(<span class="hljs-params">a,b,x,y</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> b:<br>        <span class="hljs-keyword">return</span> a,<span class="hljs-number">1</span>,<span class="hljs-number">0</span><br><br>    d,y,x = extend_gcd(b, a % b, y, x)<br>    y -= a // b * x<br>    <span class="hljs-keyword">return</span> d,x,y<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">while</span> n:<br>    n -= <span class="hljs-number">1</span><br>    a,b = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    x,y = <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    d,x,y = extend_gcd(a,b,x,y)<br>    <span class="hljs-built_in">print</span>(x,y)<br></code></pre></td></tr></table></figure><h3 id="线性同余方程"><a href="#线性同余方程" class="headerlink" title="线性同余方程"></a>线性同余方程</h3><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240518200819.png" alt="20240518200819"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">extend_gcd</span>(<span class="hljs-params">a,b,x,y</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> b:<br>        <span class="hljs-keyword">return</span> a,<span class="hljs-number">1</span>,<span class="hljs-number">0</span><br><br>    d,y,x = extend_gcd(b, a % b, y, x)<br>    y -= a // b * x<br>    <span class="hljs-keyword">return</span> d,x,y<br><br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br><span class="hljs-keyword">while</span> n:<br>    n -= <span class="hljs-number">1</span><br>    a,b,m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>,<span class="hljs-built_in">input</span>().split())<br>    x,y = <span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    d,x,y = extend_gcd(a,m,x,y)<br>    <span class="hljs-keyword">if</span> b % d:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;impossible&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(x * (b // d) % m)<br></code></pre></td></tr></table></figure><h3 id="求组合数"><a href="#求组合数" class="headerlink" title="求组合数"></a>求组合数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">C</span>(<span class="hljs-params">n, m</span>):<br>    <span class="hljs-keyword">return</span> math.factorial(n) // (math.factorial(m) * math.factorial(n - m))<br>n, m = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br><span class="hljs-built_in">print</span>(C(n, m))<br></code></pre></td></tr></table></figure><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 左闭右闭</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FenWick</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>):<br>        self.n = n<br>        self.tr = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>)]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sum</span>(<span class="hljs-params">self, i: <span class="hljs-built_in">int</span></span>):<br>        i += <span class="hljs-number">1</span><br>        s = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i &gt;= <span class="hljs-number">1</span>:<br>            s += self.tr[i]<br>            i &amp;= i - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> s<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rangeSum</span>(<span class="hljs-params">self, l: <span class="hljs-built_in">int</span>, r: <span class="hljs-built_in">int</span></span>):<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">sum</span>(r) - self.<span class="hljs-built_in">sum</span>(l - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, i: <span class="hljs-built_in">int</span>, val: <span class="hljs-built_in">int</span></span>):<br>        i += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> i &lt;= self.n:<br>            self.tr[i] += val<br>            i += i &amp; -i<br></code></pre></td></tr></table></figure><h3 id="线段数"><a href="#线段数" class="headerlink" title="线段数"></a>线段数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict<br><span class="hljs-comment"># region fastio</span><br><span class="hljs-built_in">input</span> = <span class="hljs-keyword">lambda</span>: sys.stdin.readline().rstrip()<br>sint = <span class="hljs-keyword">lambda</span>: <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>mint = <span class="hljs-keyword">lambda</span>: <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>ints = <span class="hljs-keyword">lambda</span>: <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">segtree</span>:<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span>, m: <span class="hljs-built_in">int</span></span>):<br>        self.n = n<br>        self.m = m<br>        self.<span class="hljs-built_in">max</span> = [<span class="hljs-number">0</span>] * (<span class="hljs-number">4</span>*n)  <span class="hljs-comment"># 维护区间最大值</span><br>        self.<span class="hljs-built_in">sum</span> = [<span class="hljs-number">0</span>] * (<span class="hljs-number">4</span>*n)  <span class="hljs-comment"># 维护区间和</span><br>        <span class="hljs-comment"># self.build(m, 1, n, 1)  # 建树【线段树下标从1开始】</span><br>    <br>    <span class="hljs-comment"># &#x27;&#x27;&#x27;自定义build函数：建树&#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># def build(self, val, left, right, root):</span><br>    <span class="hljs-comment">#     if left == right:       # 到达叶子节点，递归终止</span><br>    <span class="hljs-comment">#         self.max[root] = val</span><br>    <span class="hljs-comment">#         self.sum[root] = val</span><br>    <span class="hljs-comment">#         return</span><br>    <span class="hljs-comment">#     mid = (left + right) // 2</span><br>    <span class="hljs-comment">#     self.build(val, left, mid, 2*root)  # 左右递归</span><br>    <span class="hljs-comment">#     self.build(val, mid+1, right, 2*root+1)</span><br>    <span class="hljs-comment">#     self.pushUp(root)                   # 更新信息</span><br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;自定义pushUp函数：更新节点信息&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pushUp</span>(<span class="hljs-params">self, root</span>):<br>        self.<span class="hljs-built_in">max</span>[root] = <span class="hljs-built_in">max</span>(self.<span class="hljs-built_in">max</span>[<span class="hljs-number">2</span>*root], self.<span class="hljs-built_in">max</span>[<span class="hljs-number">2</span>*root+<span class="hljs-number">1</span>])<br>        self.<span class="hljs-built_in">sum</span>[root] = self.<span class="hljs-built_in">sum</span>[<span class="hljs-number">2</span>*root] + self.<span class="hljs-built_in">sum</span>[<span class="hljs-number">2</span>*root+<span class="hljs-number">1</span>]<br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;自定义add函数：单点更新&#x27;&#x27;&#x27;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, i: <span class="hljs-built_in">int</span>, val: <span class="hljs-built_in">int</span>, left: <span class="hljs-built_in">int</span>, right: <span class="hljs-built_in">int</span>, root: <span class="hljs-built_in">int</span></span>) -&gt; <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># i表示操作位置编号; root表示当前节点编号(树中)，[left, right]表示root节点所维护的区间</span><br>        <span class="hljs-keyword">if</span> left == right:           <span class="hljs-comment"># 到达叶子节点，递归终止</span><br>            self.<span class="hljs-built_in">max</span>[root] += val   <span class="hljs-comment"># root节点更新，+val</span><br>            self.<span class="hljs-built_in">sum</span>[root] += val   <span class="hljs-comment"># root节点更新，+val</span><br>            <span class="hljs-keyword">return</span><br>        mid = (left + right) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">if</span> i &lt;= mid:                <span class="hljs-comment"># 根据条件判断去往左/右子树</span><br>            self.add(i, val, left, mid, <span class="hljs-number">2</span>*root)<br>        <span class="hljs-keyword">else</span>:<br>            self.add(i, val, mid+<span class="hljs-number">1</span>, right, <span class="hljs-number">2</span>*root+<span class="hljs-number">1</span>)<br>        self.pushUp(root)           <span class="hljs-comment"># 子节点更新了，父节点信息也需要更新</span><br>    <br>    <span class="hljs-string">&#x27;&#x27;&#x27;自定义query函数：区间和查询&#x27;&#x27;&#x27;</span><br>    <span class="hljs-comment"># 查询[L, R]之间合</span><br>    <span class="hljs-comment"># 在区间[left, right]中查询区间[L,R]中的数值之和【求和】</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query</span>(<span class="hljs-params">self, L: <span class="hljs-built_in">int</span>, R: <span class="hljs-built_in">int</span>, left: <span class="hljs-built_in">int</span>, right: <span class="hljs-built_in">int</span>, root: <span class="hljs-built_in">int</span></span>):<br>        <span class="hljs-comment"># L,R表示操作区间; root表示当前节点编号(树中)，[left, right]表示root节点所维护的区间</span><br>        <span class="hljs-keyword">if</span> L&lt;=left <span class="hljs-keyword">and</span> right&lt;=R:<br>            <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">sum</span>[root]<br>        mid = (left+right) // <span class="hljs-number">2</span><br>        range_sum = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> L &lt;= mid:        <span class="hljs-comment"># 左区间有重合</span><br>            range_sum += self.query(L, R, left, mid, <span class="hljs-number">2</span>*root)<br>        <span class="hljs-keyword">if</span> R &gt; mid:         <span class="hljs-comment"># 右区间有重合</span><br>            range_sum += self.query(L, R, mid+<span class="hljs-number">1</span>, right, <span class="hljs-number">2</span>*root+<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">return</span> range_sum<br><br>    <span class="hljs-comment">#查询[L, R]之间的最大值</span><br>    <span class="hljs-comment">#qeery_max(L,R,1,N,1)</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">query_max</span>(<span class="hljs-params">self, L:<span class="hljs-built_in">int</span>, R: <span class="hljs-built_in">int</span>, left :<span class="hljs-built_in">int</span>, right: <span class="hljs-built_in">int</span>, root : <span class="hljs-built_in">int</span></span>):<br>        <span class="hljs-keyword">if</span> L &lt;= left <span class="hljs-keyword">and</span> right &lt;= R:<br>            <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">max</span>[root]<br>        mid = (left + right) // <span class="hljs-number">2</span><br>        mm = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">if</span> L &lt;= mid:<br>            mm = self.query_max(L, R, left, mid, <span class="hljs-number">2</span> * root)<br>        <span class="hljs-keyword">if</span> R &gt; mid:<br>            mm = <span class="hljs-built_in">max</span>(mm, self.query_max(L, R, mid + <span class="hljs-number">1</span>, right, <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">return</span> mm<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>():<br>    m, p = mint()<br>    se = segtree(m, <span class="hljs-number">0</span>)<br>    last = <span class="hljs-number">0</span><br>    n = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m):<br>        op, l = <span class="hljs-built_in">input</span>().split()<br>        l = <span class="hljs-built_in">int</span>(l)<br>        <span class="hljs-keyword">if</span> op == <span class="hljs-string">&#x27;A&#x27;</span>:<br>            <span class="hljs-comment"># print(&quot;val&quot;, (last + l) % p)</span><br>            se.add(n + <span class="hljs-number">1</span>, (last + l) % p, <span class="hljs-number">1</span>, m, <span class="hljs-number">1</span>)<br>            n += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            last = se.query_max(n - l + <span class="hljs-number">1</span>, n, <span class="hljs-number">1</span>, m, <span class="hljs-number">1</span> )<br>            <span class="hljs-built_in">print</span>(last)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    solve()<br></code></pre></td></tr></table></figure><h3 id="SortedList"><a href="#SortedList" class="headerlink" title="SortedList"></a>SortedList</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><code class="hljs python"><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SortedList</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, iterable=[], _load=<span class="hljs-number">200</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Initialize sorted list instance.&quot;&quot;&quot;</span><br>        values = <span class="hljs-built_in">sorted</span>(iterable)<br>        self._<span class="hljs-built_in">len</span> = _<span class="hljs-built_in">len</span> = <span class="hljs-built_in">len</span>(values)<br>        self._load = _load<br>        self._lists = _lists = [values[i:i + _load] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, _<span class="hljs-built_in">len</span>, _load)]<br>        self._list_lens = [<span class="hljs-built_in">len</span>(_<span class="hljs-built_in">list</span>) <span class="hljs-keyword">for</span> _<span class="hljs-built_in">list</span> <span class="hljs-keyword">in</span> _lists]<br>        self._mins = [_<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> _<span class="hljs-built_in">list</span> <span class="hljs-keyword">in</span> _lists]<br>        self._fen_tree = []<br>        self._rebuild = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_fen_build</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Build a fenwick tree instance.&quot;&quot;&quot;</span><br>        self._fen_tree[:] = self._list_lens<br>        _fen_tree = self._fen_tree<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(_fen_tree)):<br>            <span class="hljs-keyword">if</span> i | i + <span class="hljs-number">1</span> &lt; <span class="hljs-built_in">len</span>(_fen_tree):<br>                _fen_tree[i | i + <span class="hljs-number">1</span>] += _fen_tree[i]<br>        self._rebuild = <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_fen_update</span>(<span class="hljs-params">self, index, value</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Update `fen_tree[index] += value`.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self._rebuild:<br>            _fen_tree = self._fen_tree<br>            <span class="hljs-keyword">while</span> index &lt; <span class="hljs-built_in">len</span>(_fen_tree):<br>                _fen_tree[index] += value<br>                index |= index + <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_fen_query</span>(<span class="hljs-params">self, end</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return `sum(_fen_tree[:end])`.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> self._rebuild:<br>            self._fen_build()<br><br>        _fen_tree = self._fen_tree<br>        x = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> end:<br>            x += _fen_tree[end - <span class="hljs-number">1</span>]<br>            end &amp;= end - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_fen_findkth</span>(<span class="hljs-params">self, k</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return a pair of (the largest `idx` such that `sum(_fen_tree[:idx]) &lt;= k`, `k - sum(_fen_tree[:idx])`).&quot;&quot;&quot;</span><br>        _list_lens = self._list_lens<br>        <span class="hljs-keyword">if</span> k &lt; _list_lens[<span class="hljs-number">0</span>]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, k<br>        <span class="hljs-keyword">if</span> k &gt;= self._<span class="hljs-built_in">len</span> - _list_lens[-<span class="hljs-number">1</span>]:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">len</span>(_list_lens) - <span class="hljs-number">1</span>, k + _list_lens[-<span class="hljs-number">1</span>] - self._<span class="hljs-built_in">len</span><br>        <span class="hljs-keyword">if</span> self._rebuild:<br>            self._fen_build()<br><br>        _fen_tree = self._fen_tree<br>        idx = -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(_fen_tree).bit_length())):<br>            right_idx = idx + (<span class="hljs-number">1</span> &lt;&lt; d)<br>            <span class="hljs-keyword">if</span> right_idx &lt; <span class="hljs-built_in">len</span>(_fen_tree) <span class="hljs-keyword">and</span> k &gt;= _fen_tree[right_idx]:<br>                idx = right_idx<br>                k -= _fen_tree[idx]<br>        <span class="hljs-keyword">return</span> idx + <span class="hljs-number">1</span>, k<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_delete</span>(<span class="hljs-params">self, pos, idx</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Delete value at the given `(pos, idx)`.&quot;&quot;&quot;</span><br>        _lists = self._lists<br>        _mins = self._mins<br>        _list_lens = self._list_lens<br><br>        self._<span class="hljs-built_in">len</span> -= <span class="hljs-number">1</span><br>        self._fen_update(pos, -<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">del</span> _lists[pos][idx]<br>        _list_lens[pos] -= <span class="hljs-number">1</span><br><br>        <span class="hljs-keyword">if</span> _list_lens[pos]:<br>            _mins[pos] = _lists[pos][<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">del</span> _lists[pos]<br>            <span class="hljs-keyword">del</span> _list_lens[pos]<br>            <span class="hljs-keyword">del</span> _mins[pos]<br>            self._rebuild = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_loc_left</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return an index pair that corresponds to the first position of `value` in the sorted list.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self._<span class="hljs-built_in">len</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>        _lists = self._lists<br>        _mins = self._mins<br><br>        lo, pos = -<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(_lists) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> lo + <span class="hljs-number">1</span> &lt; pos:<br>            mi = (lo + pos) &gt;&gt; <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> value &lt;= _mins[mi]:<br>                pos = mi<br>            <span class="hljs-keyword">else</span>:<br>                lo = mi<br><br>        <span class="hljs-keyword">if</span> pos <span class="hljs-keyword">and</span> value &lt;= _lists[pos - <span class="hljs-number">1</span>][-<span class="hljs-number">1</span>]:<br>            pos -= <span class="hljs-number">1</span><br><br>        _<span class="hljs-built_in">list</span> = _lists[pos]<br>        lo, idx = -<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(_<span class="hljs-built_in">list</span>)<br>        <span class="hljs-keyword">while</span> lo + <span class="hljs-number">1</span> &lt; idx:<br>            mi = (lo + idx) &gt;&gt; <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> value &lt;= _<span class="hljs-built_in">list</span>[mi]:<br>                idx = mi<br>            <span class="hljs-keyword">else</span>:<br>                lo = mi<br><br>        <span class="hljs-keyword">return</span> pos, idx<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_loc_right</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return an index pair that corresponds to the last position of `value` in the sorted list.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self._<span class="hljs-built_in">len</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br><br>        _lists = self._lists<br>        _mins = self._mins<br><br>        pos, hi = <span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(_lists)<br>        <span class="hljs-keyword">while</span> pos + <span class="hljs-number">1</span> &lt; hi:<br>            mi = (pos + hi) &gt;&gt; <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> value &lt; _mins[mi]:<br>                hi = mi<br>            <span class="hljs-keyword">else</span>:<br>                pos = mi<br><br>        _<span class="hljs-built_in">list</span> = _lists[pos]<br>        lo, idx = -<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(_<span class="hljs-built_in">list</span>)<br>        <span class="hljs-keyword">while</span> lo + <span class="hljs-number">1</span> &lt; idx:<br>            mi = (lo + idx) &gt;&gt; <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> value &lt; _<span class="hljs-built_in">list</span>[mi]:<br>                idx = mi<br>            <span class="hljs-keyword">else</span>:<br>                lo = mi<br><br>        <span class="hljs-keyword">return</span> pos, idx<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Add `value` to sorted list.&quot;&quot;&quot;</span><br>        _load = self._load<br>        _lists = self._lists<br>        _mins = self._mins<br>        _list_lens = self._list_lens<br><br>        self._<span class="hljs-built_in">len</span> += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> _lists:<br>            pos, idx = self._loc_right(value)<br>            self._fen_update(pos, <span class="hljs-number">1</span>)<br>            _<span class="hljs-built_in">list</span> = _lists[pos]<br>            _<span class="hljs-built_in">list</span>.insert(idx, value)<br>            _list_lens[pos] += <span class="hljs-number">1</span><br>            _mins[pos] = _<span class="hljs-built_in">list</span>[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">if</span> _load + _load &lt; <span class="hljs-built_in">len</span>(_<span class="hljs-built_in">list</span>):<br>                _lists.insert(pos + <span class="hljs-number">1</span>, _<span class="hljs-built_in">list</span>[_load:])<br>                _list_lens.insert(pos + <span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(_<span class="hljs-built_in">list</span>) - _load)<br>                _mins.insert(pos + <span class="hljs-number">1</span>, _<span class="hljs-built_in">list</span>[_load])<br>                _list_lens[pos] = _load<br>                <span class="hljs-keyword">del</span> _<span class="hljs-built_in">list</span>[_load:]<br>                self._rebuild = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            _lists.append([value])<br>            _mins.append(value)<br>            _list_lens.append(<span class="hljs-number">1</span>)<br>            self._rebuild = <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">discard</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Remove `value` from sorted list if it is a member.&quot;&quot;&quot;</span><br>        _lists = self._lists<br>        <span class="hljs-keyword">if</span> _lists:<br>            pos, idx = self._loc_right(value)<br>            <span class="hljs-keyword">if</span> idx <span class="hljs-keyword">and</span> _lists[pos][idx - <span class="hljs-number">1</span>] == value:<br>                self._delete(pos, idx - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">remove</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Remove `value` from sorted list; `value` must be a member.&quot;&quot;&quot;</span><br>        _<span class="hljs-built_in">len</span> = self._<span class="hljs-built_in">len</span><br>        self.discard(value)<br>        <span class="hljs-keyword">if</span> _<span class="hljs-built_in">len</span> == self._<span class="hljs-built_in">len</span>:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">&#x27;&#123;0!r&#125; not in list&#x27;</span>.<span class="hljs-built_in">format</span>(value))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pop</span>(<span class="hljs-params">self, index=-<span class="hljs-number">1</span></span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Remove and return value at `index` in sorted list.&quot;&quot;&quot;</span><br>        pos, idx = self._fen_findkth(self._<span class="hljs-built_in">len</span> + index <span class="hljs-keyword">if</span> index &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> index)<br>        value = self._lists[pos][idx]<br>        self._delete(pos, idx)<br>        <span class="hljs-keyword">return</span> value<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bisect_left</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return the first index to insert `value` in the sorted list.&quot;&quot;&quot;</span><br>        pos, idx = self._loc_left(value)<br>        <span class="hljs-keyword">return</span> self._fen_query(pos) + idx<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">bisect_right</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return the last index to insert `value` in the sorted list.&quot;&quot;&quot;</span><br>        pos, idx = self._loc_right(value)<br>        <span class="hljs-keyword">return</span> self._fen_query(pos) + idx<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">count</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return number of occurrences of `value` in the sorted list.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self.bisect_right(value) - self.bisect_left(value)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return the size of the sorted list.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> self._<span class="hljs-built_in">len</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Lookup value at `index` in sorted list.&quot;&quot;&quot;</span><br>        pos, idx = self._fen_findkth(self._<span class="hljs-built_in">len</span> + index <span class="hljs-keyword">if</span> index &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> index)<br>        <span class="hljs-keyword">return</span> self._lists[pos][idx]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__delitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Remove value at `index` from sorted list.&quot;&quot;&quot;</span><br>        pos, idx = self._fen_findkth(self._<span class="hljs-built_in">len</span> + index <span class="hljs-keyword">if</span> index &lt; <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> index)<br>        self._delete(pos, idx)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__contains__</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return true if `value` is an element of the sorted list.&quot;&quot;&quot;</span><br>        _lists = self._lists<br>        <span class="hljs-keyword">if</span> _lists:<br>            pos, idx = self._loc_left(value)<br>            <span class="hljs-keyword">return</span> idx &lt; <span class="hljs-built_in">len</span>(_lists[pos]) <span class="hljs-keyword">and</span> _lists[pos][idx] == value<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__iter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return an iterator over the sorted list.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> (value <span class="hljs-keyword">for</span> _<span class="hljs-built_in">list</span> <span class="hljs-keyword">in</span> self._lists <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> _<span class="hljs-built_in">list</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reversed__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return a reverse iterator over the sorted list.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> (value <span class="hljs-keyword">for</span> _<span class="hljs-built_in">list</span> <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(self._lists) <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> <span class="hljs-built_in">reversed</span>(_<span class="hljs-built_in">list</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__repr__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-string">&quot;&quot;&quot;Return string representation of sorted list.&quot;&quot;&quot;</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;SortedList(&#123;0&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">list</span>(self))<br></code></pre></td></tr></table></figure><h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">StringHash</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, s</span>):<br>        n = <span class="hljs-built_in">len</span>(s)<br>        self.base = <span class="hljs-number">131</span><br>        self.mod = <span class="hljs-number">10</span> ** <span class="hljs-number">13</span> + <span class="hljs-number">7</span><br>        self.h = h = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>        self.p = p = [<span class="hljs-number">1</span>] * (n + <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>            p[i] = p[i - <span class="hljs-number">1</span>] * self.base % self.mod<br>            h[i] = h[i - <span class="hljs-number">1</span>] * self.base + <span class="hljs-built_in">ord</span>(s[i - <span class="hljs-number">1</span>])<br>            h[i] %= self.mod<br><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_hash</span>(<span class="hljs-params">self, l, r</span>):<br>            res = self.h[r] - self.h[l] * self.p[r - l]<br>            <span class="hljs-keyword">return</span> res % self.mod<br></code></pre></td></tr></table></figure><h3 id="二维差分"><a href="#二维差分" class="headerlink" title="二维差分"></a>二维差分</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>        b[i][j] = a[i][j] - a[i - <span class="hljs-number">1</span>][j] - a[i][j - <span class="hljs-number">1</span>] + a[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>    x1, y1, x2, y2, c = mint()<br>    b[x1][y1] += c<br>    b[x1][y2 + <span class="hljs-number">1</span>] -= c<br>    b[x2 + <span class="hljs-number">1</span>][y1] -= c<br>    b[x2 + <span class="hljs-number">1</span>][y2 + <span class="hljs-number">1</span>] += c<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, m + <span class="hljs-number">1</span>):<br>        a[i][j] = b[i][j] + a[i - <span class="hljs-number">1</span>][j] + a[i][j - <span class="hljs-number">1</span>] - a[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]<br>        <span class="hljs-built_in">print</span>(a[i][j], end = <span class="hljs-string">&#x27; &#x27;</span>)<br>    <span class="hljs-built_in">print</span>()<br></code></pre></td></tr></table></figure><h2 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h2><h3 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">spfa</span>(<span class="hljs-params">u, n, g</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    q = deque()<br>    q.append(u)<br>    vis = <span class="hljs-built_in">set</span>()<br>    dist = defaultdict(<span class="hljs-keyword">lambda</span> : inf)<br>    vis.add(u)<br>    dist[u] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> q:<br>        t = q.popleft()<br>        vis.remove(t)<br>        <span class="hljs-keyword">for</span> j, d <span class="hljs-keyword">in</span> g[t]:<br>            <span class="hljs-keyword">if</span> dist[j] &gt; dist[t] + d:<br>                dist[j] = dist[t] + d<br>                <span class="hljs-keyword">if</span> j <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> vis:<br>                    vis.add(j)<br>                    q.append(j)<br>    <span class="hljs-keyword">return</span> dist[n]<br></code></pre></td></tr></table></figure><h3 id="dijkstra"><a href="#dijkstra" class="headerlink" title="dijkstra"></a>dijkstra</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">dij</span>(<span class="hljs-params">u, n, g</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    q = [(<span class="hljs-number">0</span>, u)] <span class="hljs-comment"># 距离 顶点</span><br>    vis = <span class="hljs-built_in">set</span>()<br>    dist = defaultdict(<span class="hljs-keyword">lambda</span> : inf)<br>    dist[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> q:<br>        d, u = heappop(q)<br>        <span class="hljs-keyword">if</span> u <span class="hljs-keyword">in</span> vis:<br>            <span class="hljs-keyword">continue</span><br>        vis.add(u)<br>        <span class="hljs-keyword">for</span> j, d <span class="hljs-keyword">in</span> g[u]:<br>            <span class="hljs-keyword">if</span> j <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> vis <span class="hljs-keyword">and</span> dist[j] &gt; dist[u] + d:<br>                dist[j] = dist[u] + d<br>                heappush(q, (dist[j], j))<br>    <span class="hljs-keyword">return</span> dist[n]<br></code></pre></td></tr></table></figure><h3 id="krushkal"><a href="#krushkal" class="headerlink" title="krushkal"></a>krushkal</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">kruskal</span>():<br>    dsu = DSU(n)<br>    edges.sort(key = <span class="hljs-keyword">lambda</span> x : x[<span class="hljs-number">2</span>])<br>    res = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> u, v, w <span class="hljs-keyword">in</span> edges:<br>        <span class="hljs-keyword">if</span> dsu.same(u, v):<br>            <span class="hljs-keyword">continue</span><br>        dsu.merge(u, v)<br>        res += w<br>    <span class="hljs-keyword">return</span> res <span class="hljs-keyword">if</span> dsu.n == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> inf<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/post/9211474f.html"/>
      <url>/post/9211474f.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"># 1. 查看系统版本<br><br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫</title>
      <link href="/post/7ade1d5c.html"/>
      <url>/post/7ade1d5c.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#是用urllib模块</span><br><span class="hljs-keyword">import</span> urllib<br><br>url = <span class="hljs-string">&quot;http://www.baidu.com&quot;</span><br><br>response = urllib.request.urlopen(url)<br><span class="hljs-comment">#read 方法 返回的字节形式的二进制数据</span><br><span class="hljs-comment">#decode 方法 将二进制数据解码成字符串</span><br>content = response.read().decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br><span class="hljs-built_in">print</span>(content)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windows</title>
      <link href="/post/e3e7859b.html"/>
      <url>/post/e3e7859b.html</url>
      
        <content type="html"><![CDATA[<h2 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h2><h3 id="snipaste"><a href="#snipaste" class="headerlink" title="snipaste"></a><code>snipaste</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">F1 截图<br>F3 粘贴，可以把粘贴的文字也变成图片<br></code></pre></td></tr></table></figure><h3 id="powertoys"><a href="#powertoys" class="headerlink" title="powertoys"></a><code>powertoys</code></h3><p>作用：<br>粘贴为纯文本<br>图片提取文字</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++</title>
      <link href="/post/6f1ca842.html"/>
      <url>/post/6f1ca842.html</url>
      
        <content type="html"><![CDATA[<h2 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br><span class="hljs-comment">// pair</span><br>vector&lt;pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; b;<br>b.<span class="hljs-built_in">push_back</span>(&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;);<br><br><span class="hljs-comment">// 遍历</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">const</span>  <span class="hljs-keyword">auto</span>&amp; [a, b] : b)&#123;<br>    cout &lt;&lt; a &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; mp = &#123;<br>    &#123;<span class="hljs-number">0</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">4</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">6</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">9</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-number">8</span>, <span class="hljs-number">2</span>&#125;<br>&#125;;<br>mp.<span class="hljs-built_in">find</span>(digit) != mp.<span class="hljs-built_in">end</span>()<br>map&lt;<span class="hljs-type">int</span>, PII&gt; mp<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> &amp;it : mp)&#123;<br>    cout &lt;&lt; it.firtst &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; it.second.first &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; it.second.second &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="readline"><a href="#readline" class="headerlink" title="readline"></a>readline</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function">std::vector&lt;T&gt; <span class="hljs-title">input</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    std::vector&lt;T&gt; a;<br>    T s;<br>    <span class="hljs-keyword">while</span> (std::cin &gt;&gt; s)<br>    &#123;<br>        a.<span class="hljs-built_in">push_back</span>(s);<br>        <span class="hljs-keyword">if</span> (std::cin.<span class="hljs-built_in">get</span>() != <span class="hljs-string">&#x27; &#x27;</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-comment">//用法</span><br>vector&lt;<span class="hljs-type">int</span>&gt; a = <span class="hljs-built_in">input</span>&lt;<span class="hljs-type">int</span>&gt;();<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-function">vector&lt;T&gt; <span class="hljs-title">input</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;T&gt; list;<br>    string input;<br>    <span class="hljs-built_in">getline</span>(cin, input);<br>    <span class="hljs-function">istringstream <span class="hljs-title">stream</span><span class="hljs-params">(input)</span></span>;<br>    <span class="hljs-type">int</span> number;<br>    <span class="hljs-keyword">while</span> (stream &gt;&gt; number)<br>    &#123;<br>        list.<span class="hljs-built_in">push_back</span>(number);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br><span class="hljs-comment">// 用法</span><br>vector&lt;<span class="hljs-type">int</span>&gt; a = <span class="hljs-built_in">input</span>&lt;<span class="hljs-type">int</span>&gt;();<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sort</title>
      <link href="/post/5124f222.html"/>
      <url>/post/5124f222.html</url>
      
        <content type="html"><![CDATA[<p>给定一个整数 $N$，请你求出所有分母小于或等于 $N$，大小在 $[0,1]$ 范围内的<strong>最简分数</strong>，并按从小到大顺序依次输出。</p><p>例如，当 $N &#x3D; 5$ 时，所有满足条件的分数按顺序依次为：</p><p>$\frac{0}{1},\frac{1}{5},\frac{1}{4},\frac{1}{3},\frac{2}{5},\frac{1}{2},\frac{3}{5},\frac{2}{3},\frac{3}{4},\frac{4}{5},\frac{1}{1}$</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>共一行，包含一个整数 $N$。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>按照从小到大的顺序，输出所有满足条件的分数。</p><p>每个分数占一行，格式为 $a&#x2F;b$，其中 $a$ 为分子， $b$ 为分母。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>$1 \le N \le 160$</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">5<br></code></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">0/1<br>1/5<br>1/4<br>1/3<br>2/5<br>1/2<br>3/5<br>2/3<br>3/4<br>4/5<br>1/1<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># E:\0Code\Algorithm\acw\1360.py 2024-03-30 by wz</span><br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> cmp_to_key<br><span class="hljs-keyword">import</span> sys<br>sys.setrecursionlimit(<span class="hljs-number">100000</span>)<br><span class="hljs-built_in">input</span>=<span class="hljs-keyword">lambda</span>:sys.stdin.readline().strip()<br><span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> *<br>sint = <span class="hljs-keyword">lambda</span>: <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>())<br>mint = <span class="hljs-keyword">lambda</span>: <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split())<br>lint = <span class="hljs-keyword">lambda</span>: <span class="hljs-built_in">list</span>(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>().split()))<br>n = sint()<br>a = <span class="hljs-built_in">set</span>()<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cmp</span>(<span class="hljs-params">x,y</span>):<br>    <span class="hljs-keyword">return</span> x[<span class="hljs-number">0</span>]*y[<span class="hljs-number">1</span>] - x[<span class="hljs-number">1</span>]*y[<span class="hljs-number">0</span>]<br>    <span class="hljs-comment">#返回 &lt; 0  排序结果 x y</span><br>    <span class="hljs-comment">#返回 &gt; 0  排序结果 y x</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i &lt;= j:<br>            a.add((i, j))       <br>b = <span class="hljs-built_in">set</span>()<br><span class="hljs-keyword">for</span> (i, j) <span class="hljs-keyword">in</span> a:<br>    b.add((i // gcd(i,j), j // gcd(i, j)))<br>a = <span class="hljs-built_in">list</span>(b)<br><br>a = <span class="hljs-built_in">sorted</span>(a, key = cmp_to_key(cmp))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;0/1&quot;</span>)<br><span class="hljs-keyword">for</span> (i, j) <span class="hljs-keyword">in</span> a:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;/&quot;</span> + <span class="hljs-built_in">str</span>(j))<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pycharm</title>
      <link href="/post/1a3626ab.html"/>
      <url>/post/1a3626ab.html</url>
      
        <content type="html"><![CDATA[<h3 id="汉化"><a href="#汉化" class="headerlink" title="汉化"></a>汉化</h3><p>在<code>plugin</code>里面下载<code>Chinese</code></p><h3 id="自带git"><a href="#自带git" class="headerlink" title="自带git"></a>自带git</h3><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240327151202.png" alt="20240327151202"></p><h3 id="新建文件自动生成头文件"><a href="#新建文件自动生成头文件" class="headerlink" title="新建文件自动生成头文件"></a>新建文件自动生成头文件</h3><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240327151303.png" alt="20240327151303"><br>操作如下<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240327151534.png" alt="20240327151534"></p><h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3>]]></content>
      
      
      
        <tags>
            
            <tag> pycharm - python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode</title>
      <link href="/post/849a3ae4.html"/>
      <url>/post/849a3ae4.html</url>
      
        <content type="html"><![CDATA[<h2 id="VSC换python内核"><a href="#VSC换python内核" class="headerlink" title="VSC换python内核"></a>VSC换python内核</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ctrl + shift + p<br>Select Interpreter<br></code></pre></td></tr></table></figure><h2 id="将mackdown转化为别的格式"><a href="#将mackdown转化为别的格式" class="headerlink" title="将mackdown转化为别的格式"></a>将mackdown转化为别的格式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">下载markdown pdf 插件<br>ctrl + shife + p <br>输入 markdown pdf<br></code></pre></td></tr></table></figure><h2 id="解决markdown-pdf-不能输出latex公式问题"><a href="#解决markdown-pdf-不能输出latex公式问题" class="headerlink" title="解决markdown pdf 不能输出latex公式问题"></a>解决markdown pdf 不能输出latex公式问题</h2><p>在下面路径打开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">C://Users/<span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>/.vscode/extensions/yzane.markdown-pdf-1.4.1/template/template.html<br></code></pre></td></tr></table></figure><p>在最后的body和html之间输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;<br>&lt;script type=&quot;text/x-mathjax-config&quot;&gt; MathJax.Hub.Config(&#123; tex2jax: &#123;inlineMath: [[&#x27;$&#x27;, &#x27;$&#x27;]]&#125;, messageStyle: &quot;none&quot; &#125;);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>参考：<br><a href="https://blog.csdn.net/qq_18506419/article/details/103461825">VScode中Markdown PDF无法正确输出包含公式的pdf解决方案</a></p><h2 id="常用cmd命令"><a href="#常用cmd命令" class="headerlink" title="常用cmd命令"></a>常用cmd命令</h2><h3 id="删除-exe"><a href="#删除-exe" class="headerlink" title="删除.exe"></a>删除.exe</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">在文件下的<span class="hljs-built_in">cmd</span>输入：<br><span class="hljs-keyword">for</span> /r %i <span class="hljs-keyword">in</span> (*.exe) <span class="hljs-keyword">do</span> <span class="hljs-built_in">del</span> /q %i<br></code></pre></td></tr></table></figure><h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ctrl+alt+u<br>为什么token会消失？？？<br>![20240205173934](https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240205173934.png)<br></code></pre></td></tr></table></figure><h3 id="vscode配置java"><a href="#vscode配置java" class="headerlink" title="vscode配置java"></a>vscode配置java</h3><ul><li>下载jdk，笔者下载的是jdk15.0.1<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311145620.png" alt="20240311145620"><br>下载完之后安装即可</li><li>环境变量配置<br>打开系统环境变量-点击环境变量-点击系统变量的path-编辑-新建，添加刚刚的安装目录的<code>bin</code>和<code>jre\bin</code><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311145829.png" alt="20240311145829"><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150012.png" alt="20240311150012"><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150158.png" alt="20240311150158"></li><li>查看配置正确<br><code>win+r</code>输入<code>cmd</code>,输入<code>java -version</code> 和 <code>javac -version</code>，如果出现下图所示配置正确<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150420.png" alt="20240311150420"></li><li>下载vscode的java插件</li><li>编写程序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// import java.util.*;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150528.png" alt="20240311150528"></li><li>可以在<code>.gitignore</code>中添加运行生成的<code>.class</code>文件<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150747.png" alt="20240311150747"></li></ul><h3 id="Fira-Code"><a href="#Fira-Code" class="headerlink" title="Fira Code"></a>Fira Code</h3><p>下载字体并安装<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240325172523.png" alt="20240325172523"><br>然后再设置中加入</p><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240325165226.png" alt="20240325165226"><br>开启连写<br>在设置中打开settings<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240325165349.png" alt="20240325165349"><br>更改<code>    &quot;editor.fontLigatures&quot;: true,</code>为true<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240325172538.png" alt="20240325172538"></p><h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3><p>vscode用户自建模板变量：<br>点击左下角设置齿轮<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240327142401.png" alt="20240327142401"><br>点击用户代码片段<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240327142436.png" alt="20240327142436"><br>可以选择新建和原有代码片段<br>提供一个示例<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240327142541.png" alt="20240327142541"><br><code>prefix</code>后面是自己设置的快捷键唤起符<br><code>description</code>是描述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">TM_SELECTED_TEXT当前选定的文本或空字符串<br>TM_CURRENT_LINE当前行的内容<br>TM_CURRENT_WORD光标下单词的内容或空字符串<br>TM_LINE_INDEX基于零索引的行号<br>TM_LINE_NUMBER基于一个索引的行号<br>TM_FILENAME当前文档的文件名<br>TM_FILENAME_BASE不带扩展名的当前文档的文件名 （比如这里你在用户代码片段中写了$&#123;TM_FILENAME_BASE&#125;，在自动生成的代码里就会在这个位置自动填充上你的文件的不含扩展名的文件名）<br>TM_DIRECTORY当前文档的目录<br>TM_FILEPATH当前文档的完整文件路径<br>RELATIVE_FILEPATH当前文档的相对（相对于打开的工作空间或文件夹）文件路径<br>CLIPBOARD剪贴板的内容<br>WORKSPACE_NAME打开的工作区或文件夹的名称<br>WORKSPACE_FOLDER打开的工作区或文件夹的路径<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">CURRENT_YEAR本年度<br>CURRENT_YEAR_SHORT本年度的最后两位数<br>CURRENT_MONTH以两位数字表示的月份（例如&quot;02&quot;）<br>CURRENT_MONTH_NAME月份的全名（例如&quot;七月&quot;）<br>CURRENT_MONTH_NAME_SHORT月份的短名称（例如&quot;Jul&quot;）<br>CURRENT_DATE以两位数字表示的月份中的某一天（例如&quot;08&quot;）<br>CURRENT_DAY_NAME日期的名称（例如&quot;星期一&quot;）<br>CURRENT_DAY_NAME_SHORT日期的短名称（例如&quot;星期一&quot;）<br>CURRENT_HOUR24 小时制格式的当前小时<br>CURRENT_MINUTE当前分钟为两位数<br>CURRENT_SECOND当前第二位为两位数<br>CURRENT_SECONDS_UNIX自 Unix 纪元以来的秒数<br></code></pre></td></tr></table></figure><p><a href="https://snippet-generator.app/?description=&tabtrigger=&snippet=&mode=vscode">自动转化为snippet网址</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">https://snippet-generator.app/?description=&amp;tabtrigger=&amp;snippet=&amp;mode=vscode<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vscode - 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda</title>
      <link href="/post/a5f86784.html"/>
      <url>/post/a5f86784.html</url>
      
        <content type="html"><![CDATA[<h2 id="anaconda"><a href="#anaconda" class="headerlink" title="anaconda"></a>anaconda</h2><h3 id="env"><a href="#env" class="headerlink" title="env"></a>env</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">创建虚拟环境</span><br><span class="hljs-string">conda</span> <span class="hljs-string">create</span> <span class="hljs-string">-n</span> <span class="hljs-string">env_name</span> <span class="hljs-string">python=3.8</span><br></code></pre></td></tr></table></figure><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">查看虚拟环境</span><br><span class="hljs-string">conda</span> <span class="hljs-string">env</span> <span class="hljs-string">list</span><br></code></pre></td></tr></table></figure><p>进入\激活虚拟环境</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">conda</span> <span class="hljs-string">activate</span> <span class="hljs-string">env_name</span><br></code></pre></td></tr></table></figure><p>退出虚拟环境</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">conda</span> <span class="hljs-string">activate</span><br></code></pre></td></tr></table></figure><p>删除虚拟环境</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-string">conda</span> <span class="hljs-string">remove</span> <span class="hljs-string">--name</span> <span class="hljs-string">env_name</span> <span class="hljs-string">--all</span><br></code></pre></td></tr></table></figure><p>导出环境</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">#获得环境中的所有配置<br>conda env export --name myenv &gt; myenv.yml<br>#重新还原环境<br>conda env create -f  myenv.yml<br></code></pre></td></tr></table></figure><h3 id="pkg"><a href="#pkg" class="headerlink" title="pkg"></a>pkg</h3><p>查看当前虚拟环境的包&#x2F;库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda list<br></code></pre></td></tr></table></figure><p>查询是否安装哪个包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">详细查找<br>conda list pkgname        <br>模糊查找<br>conda list pkgname*   <br></code></pre></td></tr></table></figure><p>安装包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda install package_name<br>conda install numpy=0.20.3<br></code></pre></td></tr></table></figure><p>查询包的版本 (不是本地的，是这个包网上有几个版本)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda search package_name<br></code></pre></td></tr></table></figure><p>卸载包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda uninstall package_name<br><br></code></pre></td></tr></table></figure><p>清理anaconda缓存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda clean -p      # 删除没有用的包 --packages<br>conda clean -t      # 删除tar打包 --tarballs<br>conda clean -y -all # 删除所有的安装包及cache(索引缓存、锁定文件、未使用过的包和tar包)<br></code></pre></td></tr></table></figure><p>python版本管理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda install python=3.5 #将版本变更到指定版本<br>python --version         #查看python版本<br></code></pre></td></tr></table></figure><p><code>conda install</code> vs <code>pip install</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda只能在conda管理的环境中使用，例如比如conda所创建的虚环境中使用。pip可以在任何环境中使用，在conda创建的环境 中使用pip命令，需要先安装pip（conda install pip ），然后可以 环境A 中使用pip 。conda 安装的包，pip可以卸载，但不能卸载依赖包，pip安装的包，只能用pip卸载。<br><br></code></pre></td></tr></table></figure><p>如何判断conda中某个包是通过conda还是pip安装的？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">执行​ conda list ，用pip安装的包显示的build项目为pypi。<br></code></pre></td></tr></table></figure><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><p>添加清华源channel</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br><br></code></pre></td></tr></table></figure><p>删除</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda config --remove channels  https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/<br><br></code></pre></td></tr></table></figure><p>展示所有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda config --show channels<br><br></code></pre></td></tr></table></figure><p>设置下载时候显示channel</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda config --set show_channel_urls yes<br></code></pre></td></tr></table></figure><p>查看现在的channel状态和优先级</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda config --get channels<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240315122413.png" alt="20240315122413"></p><p>展示所有的镜像channel</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda config --show channels #越上面优先级越高<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240315122438.png" alt="20240315122438"></p><p>添加conda-forge channel</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda-forge channel<br></code></pre></td></tr></table></figure><p><strong>最新添加的优先级越高</strong></p><h3 id="jupyter"><a href="#jupyter" class="headerlink" title="jupyter"></a>jupyter</h3><p>方法一 为 conda 环境创建特殊内核</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda create -n my-conda-env    # creates new virtual env<br>conda activate my-conda-env     # activate environment in terminal<br>conda install ipykernel      # install Python kernel in new conda env<br>ipython kernel install --user --name=环境名 # configure Jupyter to use Python kernel<br><br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240315130049.png" alt="20240315130049"><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240315130130.png" alt="20240315130130"></p><p>方法一删除虚拟环境内核</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">jupyter kernelspec remove 环境名 # 删除虚拟环境的 kernel 内核<br></code></pre></td></tr></table></figure><p>方法二 使用 nb_conda_kernels 添加所有环境<br>第一种方法其实也挺不错的。有个缺点是，你新建一个环境，就要重复操作一次。</p><p>而这个方法就是一键添加所有 conda 环境，但需要在新环境里面安装 <code>ipykernel</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">conda activate my-conda-env    <br>conda install ipykernel<br>conda deactivate<br><br>conda activate base      # could be also some other environment<br>conda install nb_conda_kernels<br>jupyter notebook<br></code></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/a5ac79c8f5825d253d1c5dcbf3a786c7.png" alt="a5ac79c8f5825d253d1c5dcbf3a786c7"><br><strong>第一个框是方法二<br>第二个框是方法一</strong><br>11</p>]]></content>
      
      
      
        <tags>
            
            <tag> jupyter </tag>
            
            <tag> anaconda </tag>
            
            <tag> python </tag>
            
            <tag> 深度学习 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sublime</title>
      <link href="/post/3e496c55.html"/>
      <url>/post/3e496c55.html</url>
      
        <content type="html"><![CDATA[<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240423173308.png" alt="20240423173308"><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240423173331.png" alt="20240423173331"></p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>ctrl + b<br>ctrl + alt + b<br>ctrl + s<br>ctrl + n</p><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>配色方案<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311154302.png" alt="20240311154302"><br>主题<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240423164843.png" alt="20240423164843"><br>字体<code>Fira Cod</code><br>首选项-设置-复制<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311154630.png" alt="20240311154630"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>&quot;ignored_packages&quot;:<br>[<br>],<br>&quot;font_face&quot;: &quot;Fira Code&quot;,<br>/*&quot;font_size&quot;: 12,*/<br>&quot;theme&quot;: &quot;Seti Monokai.sublime-theme&quot;,<br>&quot;color_scheme&quot;: &quot;Packages/Theme - Seti Monokai/scheme/Seti Monokai.tmTheme&quot;,<br>&quot;dark_color_scheme&quot;: &quot;Monokai.sublime-color-scheme&quot;,<br>&quot;light_color_scheme&quot;: &quot;Breakers.sublime-color-scheme&quot;,<br><br>&quot;sublime_merge_path&quot;: &quot;D:\\Sublime Text\\Sublime Merge\\sublime_merge.exe&quot;,<br><br><br>&quot;auto_complete&quot;: true,<br>&quot;auto_mathch_enabled&quot;: false,<br>/*&quot;color_scheme&quot;: &quot;Packages/User/SublimeLinter/Monokai (SL).tmTheme&quot;,*/<br>/*&quot;font_size&quot;: 12,*/<br>/*&quot;ignored_packages&quot;:<br>[<br>&quot;Vintage&quot;<br>],*/<br>// &quot;auto_complete_triggers&quot;: <br>// [ <br>// &#123;&quot;selector&quot;: &quot;text.html&quot;, &quot;characters&quot;: &quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.&lt;&quot;,&#125;,<br>// &#123;&quot;selector&quot;: &quot;text.plain&quot;, &quot;characters&quot;: &quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ.&lt;&quot;,&#125; <br>// ],<br><br>&quot;index_files&quot;: true,<br>&quot;font_size&quot;: 14,<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="编译系统"><a href="#编译系统" class="headerlink" title="编译系统"></a>编译系统</h2><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>    &quot;cmd&quot;: [&quot;E:/Anaconda/envs/test2/python.exe&quot;, &quot;-u&quot;, &quot;$file&quot;],<br>    &quot;selector&quot;: &quot;source.python&quot;,<br>    &quot;file_regex&quot;: &quot;^[ ]*File \&quot;(...*?)\&quot;, line ([0-9]*)&quot;,<br>    &quot;quiet&quot;: true<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java"><a href="#java" class="headerlink" title="java"></a>java</h3><p>需要手动更改class名字，目前结果方法没找到。写个模版改一下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext"><br></code></pre></td></tr></table></figure><h2 id="FastOlympicCoding"><a href="#FastOlympicCoding" class="headerlink" title="FastOlympicCoding"></a>FastOlympicCoding</h2><h3 id="更改python解释器"><a href="#更改python解释器" class="headerlink" title="更改python解释器"></a>更改python解释器</h3><p>  更改的是<code>ctrl + alt + b</code>的解释环境</p><ul><li>可以看出下方的和右侧不一样，</li><li>这是因为在Sublime Text的默认设置中，Ctrl + B通常用于触发当前激活的构建系统,是之前设置的’test2’</li><li><code>ctrl + alt + b</code>是<code>FastOlympicCoding</code>运行的默认环境python。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240205175833.png" alt="20240205175833"><br><strong>这和本地的环境是一一对应的</strong><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240205180443.png" alt="20240205180443"></p><ul><li>1 先按照下图打开：<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240205175324.png" alt="20240205175324"></li><li>2找到<code>python</code></li><li>3把<code>&quot;run_cmd&quot;: &quot;python \&quot;&#123;source_file&#125;\&quot;</code>中的<code>python</code>改为自己想要的解释器路径，如下图<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240205175358.png" alt="20240205175358"><br>更改完毕结果如下<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240205180536.png" alt="20240205180536"></li></ul><h3 id="sublime-配置java环境"><a href="#sublime-配置java环境" class="headerlink" title="sublime 配置java环境"></a>sublime 配置java环境</h3><ul><li>下载jdk和前文配置<code>vscode</code></li><li>新建编译系统<br>工具-编译系统-新建编译系统-复制进去-保存为<code>java.sublime-build</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>    &quot;cmd&quot;: [&quot;javac&quot;, &quot;$file_name&quot;, &quot;&amp;&amp;&quot;, &quot;start&quot;,&quot;cmd&quot;, &quot;/k&quot;, &quot;java&quot;, &quot;$file_base_name&quot;],<br>    &quot;shell&quot;: true,<br>    &quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,<br>    &quot;working_dir&quot;: &quot;$file_path&quot;,<br>    &quot;selector&quot;: &quot;source.java&quot;,<br>    &quot;encoding&quot;: &quot;GBK&quot;,<br>    &quot;variants&quot;: [<br>        &#123;<br>            &quot;name&quot;: &quot;Terminal&quot;,<br>            &quot;cmd&quot;: [&quot;javac&quot;, &quot;$file_name&quot;, &quot;&amp;&amp;&quot;, &quot;start&quot;,&quot;cmd&quot;, &quot;/k&quot;, &quot;java&quot;, &quot;$file_base_name&quot;],<br>            &quot;shell_cmd&quot;: &quot;&quot;,<br>        &#125;,<br>        &#123;<br>            &quot;name&quot;: &quot;Build&quot;,<br>            &quot;quiet&quot;: true,<br>            &quot;shell_cmd&quot;: &quot;javac $file_name &amp;&amp; java $file_base_name &amp;&amp; del $file_base_name.class&quot;,<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="sublime添加代码模板记得空出class位置"><a href="#sublime添加代码模板记得空出class位置" class="headerlink" title="sublime添加代码模板记得空出class位置"></a>sublime添加代码模板记得空出class位置</h3><p>工具-插件开发-新建代码片段-复制代码-保存为-“jm.sublime-snippet”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;snippet&gt;<br>    &lt;content&gt;&lt;![CDATA[<br>//$TM_FILEPATH<br>import java.io.*;<br>import java.util.StringTokenizer;<br>import java.util.Scanner;<br>public class $&#123;1:&#125; &#123;<br>    public static Reader in;<br>    public static PrintWriter out;<br>    public static void main(String[] args) &#123;<br>        out = new PrintWriter(new BufferedOutputStream(System.out));<br>        in = new Reader();<br>        int t = in.nextInt();<br>        while (t-- &gt; 0)<br>            solve();<br>        out.close();<br>    &#125;<br>    static void solve()&#123;<br>        int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();<br>        char[][] c = new char[n][m];<br>        for (int i = 0; i &lt; n; i++) &#123;<br>            c[i] = in.nextLine().toCharArray();<br>        &#125;<br>    &#125;<br> <br>    static class Reader &#123;<br>        private BufferedReader br;<br>        private StringTokenizer st;<br> <br>        Reader() &#123;<br>            br = new BufferedReader(new InputStreamReader(System.in));<br>        &#125;<br> <br>        boolean hasNext()&#123;<br>            try &#123;<br>                while (st == null || !st.hasMoreElements()) &#123;<br>                    st = new StringTokenizer(br.readLine());<br>                &#125;<br>            &#125;catch (Exception e)&#123;<br>                return false;<br>            &#125;<br>            return true;<br>        &#125;<br> <br>        String next() &#123;<br>            try &#123;<br>                while (st == null || !st.hasMoreTokens()) &#123;<br>                    st = new StringTokenizer(br.readLine());<br>                &#125;<br>            &#125; catch (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            return st.nextToken();<br>        &#125;<br> <br>        int nextInt() &#123;<br>            return Integer.parseInt(next());<br>        &#125;<br> <br>        int[] nextIntArray(int n) &#123;<br>            int[] arr = new int[n];<br>            for (int i = 0; i &lt; n; i++)<br>                arr[i] = nextInt();<br>            return arr;<br>        &#125;<br> <br>        long[] nextLongArray(int n) &#123;<br>            long[] arr = new long[n];<br>            for (int i = 0; i &lt; n; i++)<br>                arr[i] = nextLong();<br>            return arr;<br>        &#125;<br> <br>        long nextLong() &#123;<br>            return Long.parseLong(next());<br>        &#125;<br> <br>        String nextLine() &#123;<br>            String s = &quot;&quot;;<br>            try &#123;<br>                s = br.readLine();<br>            &#125; catch (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            return s;<br>        &#125;<br>    &#125;<br>&#125;<br>]]&gt;&lt;/content&gt;<br>    &lt;tabTrigger&gt;jp&lt;/tabTrigger&gt;<br>&lt;/snippet&gt;<br><br></code></pre></td></tr></table></figure><p>输入<code>jp</code>(自己设置的)就可以出现代码模板<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311153911.png" alt="20240311153911"></p>]]></content>
      
      
      
        <tags>
            
            <tag> sublime </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java1</title>
      <link href="/post/eb7e46a9.html"/>
      <url>/post/eb7e46a9.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="vscode配置java"><a href="#vscode配置java" class="headerlink" title="vscode配置java"></a>vscode配置java</h3><ul><li>下载jdk，笔者下载的是jdk15.0.1<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311145620.png" alt="20240311145620"><br>下载完之后安装即可</li><li>环境变量配置<br>打开系统环境变量-点击环境变量-点击系统变量的path-编辑-新建，添加刚刚的安装目录的<code>bin</code>和<code>jre\bin</code><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311145829.png" alt="20240311145829"><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150012.png" alt="20240311150012"><br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150158.png" alt="20240311150158"></li><li>查看配置正确<br><code>win+r</code>输入<code>cmd</code>,输入<code>java -version</code> 和 <code>javac -version</code>，如果出现下图所示配置正确<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150420.png" alt="20240311150420"></li><li>下载vscode的java插件</li><li>编写程序<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// import java.util.*;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">a</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Hello World&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150528.png" alt="20240311150528"></li><li>可以在<code>.gitignore</code>中添加运行生成的<code>.class</code>文件<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311150747.png" alt="20240311150747"></li></ul><h3 id="sublime-配置java环境"><a href="#sublime-配置java环境" class="headerlink" title="sublime 配置java环境"></a>sublime 配置java环境</h3><ul><li>下载jdk和前文配置<code>vscode</code></li><li>新建编译系统<br>工具-编译系统-新建编译系统-复制进去-保存为<code>java.sublime-build</code><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&#123;<br>    &quot;cmd&quot;: [&quot;javac&quot;, &quot;$file_name&quot;, &quot;&amp;&amp;&quot;, &quot;start&quot;,&quot;cmd&quot;, &quot;/k&quot;, &quot;java&quot;, &quot;$file_base_name&quot;],<br>    &quot;shell&quot;: true,<br>    &quot;file_regex&quot;: &quot;^(...*?):([0-9]*):?([0-9]*)&quot;,<br>    &quot;working_dir&quot;: &quot;$file_path&quot;,<br>    &quot;selector&quot;: &quot;source.java&quot;,<br>    &quot;encoding&quot;: &quot;GBK&quot;,<br>    &quot;variants&quot;: [<br>        &#123;<br>            &quot;name&quot;: &quot;Terminal&quot;,<br>            &quot;cmd&quot;: [&quot;javac&quot;, &quot;$file_name&quot;, &quot;&amp;&amp;&quot;, &quot;start&quot;,&quot;cmd&quot;, &quot;/k&quot;, &quot;java&quot;, &quot;$file_base_name&quot;],<br>            &quot;shell_cmd&quot;: &quot;&quot;,<br>        &#125;,<br>        &#123;<br>            &quot;name&quot;: &quot;Build&quot;,<br>            &quot;quiet&quot;: true,<br>            &quot;shell_cmd&quot;: &quot;javac $file_name &amp;&amp; java $file_base_name &amp;&amp; del $file_base_name.class&quot;,<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="sublime添加代码模板记得空出class位置"><a href="#sublime添加代码模板记得空出class位置" class="headerlink" title="sublime添加代码模板记得空出class位置"></a>sublime添加代码模板记得空出class位置</h3><p>工具-插件开发-新建代码片段-复制代码-保存为-“jm.sublime-snippet”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;snippet&gt;<br>    &lt;content&gt;&lt;![CDATA[<br>//$TM_FILEPATH<br>import java.io.*;<br>import java.util.StringTokenizer;<br>import java.util.Scanner;<br>public class $&#123;1:&#125; &#123;<br>    public static Reader in;<br>    public static PrintWriter out;<br>    public static void main(String[] args) &#123;<br>        out = new PrintWriter(new BufferedOutputStream(System.out));<br>        in = new Reader();<br>        int t = in.nextInt();<br>        while (t-- &gt; 0)<br>            solve();<br>        out.close();<br>    &#125;<br>    static void solve()&#123;<br>        int n = in.nextInt(), m = in.nextInt(), k = in.nextInt();<br>        char[][] c = new char[n][m];<br>        for (int i = 0; i &lt; n; i++) &#123;<br>            c[i] = in.nextLine().toCharArray();<br>        &#125;<br>    &#125;<br> <br>    static class Reader &#123;<br>        private BufferedReader br;<br>        private StringTokenizer st;<br> <br>        Reader() &#123;<br>            br = new BufferedReader(new InputStreamReader(System.in));<br>        &#125;<br> <br>        boolean hasNext()&#123;<br>            try &#123;<br>                while (st == null || !st.hasMoreElements()) &#123;<br>                    st = new StringTokenizer(br.readLine());<br>                &#125;<br>            &#125;catch (Exception e)&#123;<br>                return false;<br>            &#125;<br>            return true;<br>        &#125;<br> <br>        String next() &#123;<br>            try &#123;<br>                while (st == null || !st.hasMoreTokens()) &#123;<br>                    st = new StringTokenizer(br.readLine());<br>                &#125;<br>            &#125; catch (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            return st.nextToken();<br>        &#125;<br> <br>        int nextInt() &#123;<br>            return Integer.parseInt(next());<br>        &#125;<br> <br>        int[] nextIntArray(int n) &#123;<br>            int[] arr = new int[n];<br>            for (int i = 0; i &lt; n; i++)<br>                arr[i] = nextInt();<br>            return arr;<br>        &#125;<br> <br>        long[] nextLongArray(int n) &#123;<br>            long[] arr = new long[n];<br>            for (int i = 0; i &lt; n; i++)<br>                arr[i] = nextLong();<br>            return arr;<br>        &#125;<br> <br>        long nextLong() &#123;<br>            return Long.parseLong(next());<br>        &#125;<br> <br>        String nextLine() &#123;<br>            String s = &quot;&quot;;<br>            try &#123;<br>                s = br.readLine();<br>            &#125; catch (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            return s;<br>        &#125;<br>    &#125;<br>&#125;<br>]]&gt;&lt;/content&gt;<br>    &lt;tabTrigger&gt;jp&lt;/tabTrigger&gt;<br>&lt;/snippet&gt;<br><br></code></pre></td></tr></table></figure><p>输入<code>jp</code>(自己设置的)就可以出现代码模板<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240311153902.png" alt="20240311153902"></p><h2 id="数据结构常用"><a href="#数据结构常用" class="headerlink" title="数据结构常用"></a>数据结构常用</h2><h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;<span class="hljs-type">int</span>[]&gt;[] g = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>[N]; <span class="hljs-comment">// 邻接表</span><br>Arrays.setAll(g, i -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;());<br></code></pre></td></tr></table></figure><p><strong>List&lt;int[]&gt;[]:</strong></p><ul><li>这是一个数组，每个元素都是可以存储整数数组(int[])的list。</li><li>数组的大小在初始化时固定，并且在其生命周期中不能更改。</li><li>这种结构允许通过索引直接访问列表，访问时间为O(1)。</li></ul><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] dist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n + <span class="hljs-number">5</span>];<br>Arrays.fill(dist, Integer.MAX_VALUE );<br></code></pre></td></tr></table></figure><h3 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Deque&lt;Integer&gt; q = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h3 id="快读"><a href="#快读" class="headerlink" title="快读"></a>快读</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Reader in;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mian</span><span class="hljs-params">(String[] args)</span>&#123;<br>    in = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reader</span>();<br>&#125;<br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Reader</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> BufferedReader br;<br>    <span class="hljs-keyword">private</span> StringTokenizer st;<br><br>    Reader() &#123;<br>        br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(System.in));<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (st == <span class="hljs-literal">null</span> || !st.hasMoreElements()) &#123;<br>                st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(br.readLine());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    String <span class="hljs-title function_">next</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (st == <span class="hljs-literal">null</span> || !st.hasMoreTokens()) &#123;<br>                st = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringTokenizer</span>(br.readLine());<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> st.nextToken();<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">nextInt</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Integer.parseInt(next());<br>    &#125;<br><br>    <span class="hljs-type">int</span>[] nextIntArray(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            arr[i] = nextInt();<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br><br>    <span class="hljs-type">long</span>[] nextLongArray(<span class="hljs-type">int</span> n) &#123;<br>        <span class="hljs-type">long</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)<br>            arr[i] = nextLong();<br>        <span class="hljs-keyword">return</span> arr;<br>    &#125;<br><br>    <span class="hljs-type">long</span> <span class="hljs-title function_">nextLong</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Long.parseLong(next());<br>    &#125;<br><br>    String <span class="hljs-title function_">nextLine</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            s = br.readLine();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Set&lt;Integer&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>s.add(val);<br><br>s.contains(val);<br></code></pre></td></tr></table></figure><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List: List是一个接口，它定义了一个可以按顺序访问的元素集合的基本操作和方法。List是Java集合框架的一部分，它提供了一种方式来存储有序的元素集合。List是一个接口，所以你不能直接实例化一个List。</p><p>ArrayList: ArrayList是List接口的一个具体实现。它使用数组的结构来存储元素，这使得元素的随机访问变得非常快。但是，添加或删除元素（尤其是列表的前部）可能比在LinkedList中慢，因为这可能需要移动数组中的其他元素。ArrayList提供了List接口的所有标准操作，并且还添加了一些其他的功能，如确保容量和增加容量。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;List&lt;Integer&gt;&gt; rooms = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>下标从<span class="hljs-number">0</span>开始，访问x下标的元素。<br>rooms.get(x)<br></code></pre></td></tr></table></figure><h3 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h3><p><code>ArrayList</code>是<code>Java</code>中最常用的集合之一，提供了一系列功能来处理动态数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 访问元素</span><br>List&lt;Integer&gt; l = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>l.get(<span class="hljs-type">int</span> index);<br><br><span class="hljs-keyword">for</span>(Integer num : list)&#123;<br><br>&#125;<br><span class="hljs-comment">//大小</span><br>size()<br><span class="hljs-comment">//判空</span><br>isEmpty()<br><span class="hljs-comment">//搜索</span><br>contains(Object o) <span class="hljs-comment">//检查列表中是否存在指定的元素。</span><br>indexOf(Object o) <span class="hljs-comment">//返回列表中指定元素的第一个出现的索引，如果列表不包含该元素，则返回-1。</span><br>lastIndexOf(Object o) <span class="hljs-comment">//返回列表中指定元素的最后一个出现的索引，如果列表不包含该元素，则返回-1。</span><br><span class="hljs-comment">//范围</span><br>subList(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r) <span class="hljs-comment">// 返回一个指定范围的新列表，不会改变原有列表</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//转换</span><br>toArray() <span class="hljs-comment">//将列表转换为一个数组</span><br></code></pre></td></tr></table></figure><p>批量操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">clear() <span class="hljs-comment">// 移除列表中的所有元素。</span><br></code></pre></td></tr></table></figure><p>排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">people.sort((p1, p2) -&gt; p1.age - p2.age);<br>按照年龄升序<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/post/518e617c.html"/>
      <url>/post/518e617c.html</url>
      
        <content type="html"><![CDATA[<h2 id="建立第二个github-page"><a href="#建立第二个github-page" class="headerlink" title="建立第二个github page"></a>建立第二个github page</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">https://wawzysys.github.io/blog2/<br></code></pre></td></tr></table></figure><h2 id="sshbug"><a href="#sshbug" class="headerlink" title="sshbug"></a>ssh<code>bug</code></h2><p>不知道为什么只有pigcha才能连接成功，clash代理不显示ssh。https都没有问题。</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/post/d87f7e0c.html"/>
      <url>/post/d87f7e0c.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]<br><code>print</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-built_in">input</span>()<br><span class="hljs-built_in">print</span>(a)<br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs CSS"><span class="hljs-comment">/* CSS */</span><br><span class="hljs-keyword">@import</span> url(<span class="hljs-attribute">https</span>://cdn.jsdelivr.net/npm/firacode@<span class="hljs-number">6.2</span>.<span class="hljs-number">0</span>/distr/fira_code.css);<br><br><span class="hljs-selector-tag">h1</span><span class="hljs-selector-id">#site-title</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">8vh</span><span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">text-shadow</span>:<span class="hljs-number">5px</span> <span class="hljs-number">2px</span> <span class="hljs-number">6px</span> <span class="hljs-number">#000</span><span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">font-family</span>:Fira Code<span class="hljs-meta">!important</span><br>&#125;<br><span class="hljs-selector-tag">span</span><span class="hljs-selector-id">#subtitle</span> &#123;<br>  <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3vh</span><span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">text-shadow</span>:<span class="hljs-number">5px</span> <span class="hljs-number">2px</span> <span class="hljs-number">6px</span> <span class="hljs-number">#000</span><span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">font-family</span>:Fira Code<span class="hljs-meta">!important</span><br>&#125;<br><span class="hljs-selector-tag">a</span><span class="hljs-selector-id">#site-name</span> &#123;<br>  <span class="hljs-attribute">text-shadow</span>:<span class="hljs-number">5px</span> <span class="hljs-number">2px</span> <span class="hljs-number">6px</span> <span class="hljs-number">#000</span><span class="hljs-meta">!important</span>;<br>  <span class="hljs-attribute">font-family</span>:Fira Code<span class="hljs-meta">!important</span><br>&#125;<br><br><span class="hljs-selector-id">#article-container</span> pre, <span class="hljs-selector-id">#article-container</span> <span class="hljs-selector-tag">code</span> &#123;<br>  <span class="hljs-attribute">font-family</span>:Fira Code<span class="hljs-meta">!important</span>;<br>&#125;<br><span class="hljs-selector-class">.article-title</span> &#123;<br>  <span class="hljs-attribute">font-weight</span>: bolder;<br>  <span class="hljs-attribute">font-family</span>:Fira Code<span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python</title>
      <link href="/post/b9ebdeb8.html"/>
      <url>/post/b9ebdeb8.html</url>
      
        <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">bisect_left:&gt;=<br>bisect_right:&gt;<br></code></pre></td></tr></table></figure><h2 id="dict"><a href="#dict" class="headerlink" title="dict"></a>dict</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = defaultdict(<span class="hljs-built_in">list</span>)<br><span class="hljs-comment"># 设置无限大</span><br><span class="hljs-built_in">dict</span> = defaultdict(inf) <br></code></pre></td></tr></table></figure><h2 id="SortedDict"><a href="#SortedDict" class="headerlink" title="SortedDict"></a>SortedDict</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">dict</span> = defaultdict(SortedDict)<br></code></pre></td></tr></table></figure><h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-built_in">any</span>(<span class="hljs-number">1</span> <span class="hljs-keyword">in</span> row <span class="hljs-keyword">for</span> row <span class="hljs-keyword">in</span> grid):<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><span class="hljs-comment"># 检查列表中是否有真值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>([<span class="hljs-number">0</span>, <span class="hljs-literal">False</span>, <span class="hljs-number">5</span>]))  <span class="hljs-comment"># True，因为5是真值</span><br><br><span class="hljs-comment"># 空列表中没有真值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>([]))  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># 字典在使用any时会检查键而不是值</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>(&#123;<span class="hljs-number">0</span>: <span class="hljs-string">&quot;False&quot;</span>, <span class="hljs-number">1</span>: <span class="hljs-string">&quot;True&quot;</span>&#125;))  <span class="hljs-comment"># True，因为有一个真键1</span><br><br><span class="hljs-comment"># 空字典</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>(&#123;&#125;))  <span class="hljs-comment"># False</span><br><br><span class="hljs-comment"># 检查列表中是否存在大于5的元素</span><br>nums = [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">any</span>(n &gt; <span class="hljs-number">5</span> <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> nums))  <span class="hljs-comment"># True</span><br></code></pre></td></tr></table></figure><h2 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#二位数组</span><br><span class="hljs-keyword">import</span> copy<br>pre_grid = copy.deepcopy(grid)<span class="hljs-comment">##pre_grid 和 grid两者独立</span><br>pre_grid = grid <span class="hljs-comment">##两者不独立</span><br>pre_grid = grid.copy() <span class="hljs-comment">##两者不独立</span><br><span class="hljs-comment"># 使用.copy()方法对列表进行浅复制（shallow copy）时，这个方法只会创建列表</span><br><span class="hljs-comment"># 本身的一个新的副本，但是不会对列表中的子列表（即列表中的列表）进行深度复制。</span><br><span class="hljs-comment"># 这意味着，如果原始列表中包含了其他列表（如二维数组或矩阵），那么新列表和原</span><br><span class="hljs-comment"># 始列表中的子列表仍然是相同的对象（即它们在内存中的地址是相同的）。</span><br><span class="hljs-comment"># 因此，当您修改grid中的任何元素时，pre_color中相应的子列表元素也会被修改，</span><br><span class="hljs-comment"># 因为它们实际上是指向同一块内存地址。</span><br><br></code></pre></td></tr></table></figure><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">a_copy = a.copy()<span class="hljs-comment">#两者独立 </span><br>a_copy = a[:]<span class="hljs-comment">#两者独立 使用切片</span><br>a_copy = a<span class="hljs-comment">#两者不独立</span><br><span class="hljs-comment">#对于一维数组（列表），可以使用 .copy() 方法或切片操作 [:] 来创建一个浅复制。</span><br><span class="hljs-comment"># 对于一维数组，这两种方法都能有效地复制数组，因为一维数组不包含嵌套的列表，</span><br><span class="hljs-comment"># 所以“浅复制”已经足够用于创建一个完全独立的副本</span><br><span class="hljs-comment"># 修改副本中的元素不会影响原始数组。</span><br></code></pre></td></tr></table></figure><h2 id="可变对象"><a href="#可变对象" class="headerlink" title="可变对象"></a>可变对象</h2><ul><li>可变对象（如列表、字典、集合等）则表现出“按引用传递”的特性。</li><li>因为函数接收的参数是对象的引用，所以如果你在函数内部修改了一个可变对象（例如，添加、删除或者修改列表中的元素），</li><li>那么这些修改会反映到原始对象上，因为实际上你和函数内部操作的是同一个对象。</li></ul><h2 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h2><ul><li>不可变对象（如<strong>整数、浮点数、字符串、元组</strong>等）看起来像是“按值传递”，因为它们的值不能被修改。</li><li>如果你在函数内部试图改变一个不可变对象的值，实际上会创建一个新的对象，并将其绑定到函数内部的局部变量名上，而原始对象不会受到影响。</li></ul><h2 id="def-函数参数"><a href="#def-函数参数" class="headerlink" title="def 函数参数"></a>def 函数参数</h2><p>在Python中，所有的<em><strong>函数参数</strong></em>传递都可以视为“按对象引用传递”（pass by object reference）。这意味着函数内部接收到的是实际参数对象的引用，而不是对象的副本。这种传递方式的效果取决于对象本身是可变的（mutable）还是不可变的（immutable）。</p><h3 id="不可变"><a href="#不可变" class="headerlink" title="不可变"></a>不可变</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">area = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">area</span>):<br>    area += <span class="hljs-number">1</span><br>fun(area)<br><span class="hljs-built_in">print</span>(area) <br><span class="hljs-comment"># 0</span><br><span class="hljs-comment">#area 不可变 </span><br><span class="hljs-comment">#函数fun中的area是一个局部变量，它仅在函数作用域内有效。尽管它与全局变量area同名，但它实际上是一个完全不同的变量。在fun函数内部修改area时，实际上是在修改这个局部变量，而不是全局变量area。因此，全局变量area的值不会因为调用fun函数而改变。</span><br></code></pre></td></tr></table></figure><h3 id="Python中函数参数如何按引用传递（对于可变对象而言）"><a href="#Python中函数参数如何按引用传递（对于可变对象而言）" class="headerlink" title="Python中函数参数如何按引用传递（对于可变对象而言）"></a>Python中函数参数如何按引用传递（对于可变对象而言）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">area[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>(<span class="hljs-params">area</span>):<br>    area[<span class="hljs-number">0</span>] += <span class="hljs-number">1</span><br>fun(area)<br><span class="hljs-built_in">print</span>(area[<span class="hljs-number">0</span>]) <br><span class="hljs-comment"># 1</span><br></code></pre></td></tr></table></figure><h3 id="不可变对象-global"><a href="#不可变对象-global" class="headerlink" title="不可变对象 + global"></a>不可变对象 + global</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">area = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fun</span>():<br>    <span class="hljs-keyword">global</span> area  <span class="hljs-comment"># 指明我们打算修改的是全局变量area</span><br>    area += <span class="hljs-number">1</span><br>fun()<br><span class="hljs-built_in">print</span>(area)  <br><span class="hljs-comment"># 结果将是1，因为fun函数被调用，全局变量area被修改</span><br><br></code></pre></td></tr></table></figure><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><ul><li>使用<code>global</code>关键字在函数内部<strong>声明全局变量</strong>。</li><li>当在函数内部修改全局变量时，如果不使用<code>global</code>关键字，</li><li><code>Python</code>将会创建一个新的局部变量，而不是修改外部的全局变量。</li><li>通过使用<code>global</code>关键字，可以明确指示Python在函数内部对全局变量进行修改。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">x = <span class="hljs-number">5</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">func</span>():<br>    <span class="hljs-keyword">global</span> x  <span class="hljs-comment"># 指明我们要修改的是全局变量x</span><br>    x = <span class="hljs-number">10</span><br>func()<br><span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 输出将是10，因为全局变量x被修改了</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="nonlocal"><a href="#nonlocal" class="headerlink" title="nonlocal"></a>nonlocal</h3><ul><li><code>nonlocal</code>关键字用于在嵌套函数中声明非局部变量（即不属于这个函数，但也不是全局的变量）。</li><li>这通常用于在嵌套函数中修改封闭作用域（enclosing scope，即嵌套函数外部的另一个函数内部）的变量。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    x = <span class="hljs-number">5</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-keyword">nonlocal</span> x  <span class="hljs-comment"># 指明我们要修改的是封闭作用域中的变量x</span><br>        x = <span class="hljs-number">10</span><br>    inner()<br>    <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 输出将是10，因为封闭作用域中的变量x被修改了</span><br>outer()<br><br></code></pre></td></tr></table></figure><h3 id="使用注意事项"><a href="#使用注意事项" class="headerlink" title="使用注意事项"></a>使用注意事项</h3><p><code>global</code>和<code>nonlocal</code>关键主要用于复杂的场景，比如需要在多层嵌套的函数中修改外部变量的值。然而，过度使用这些关键字可能会导致代码难以理解和维护，因此应该谨慎使用。<br>如果可以通过其他方式（如返回值、类属性等）来实现相同的功能，通常这些方式会更加清晰和优雅。</p><h2 id="嵌套函数"><a href="#嵌套函数" class="headerlink" title="嵌套函数"></a>嵌套函数</h2><p>在Python中，嵌套函数可以访问其外部函数（父函数）作用域内的所有变量，无论这些变量是可变的还是不可变的。这种特性是由于Python的作用域和闭包的概念所决定的。当你在一个函数内定义另一个函数时，内部的函数（嵌套函数）可以访问外部函数的局部变量。</p><h3 id="访问不可变变量"><a href="#访问不可变变量" class="headerlink" title="访问不可变变量"></a>访问不可变变量</h3><p>嵌套函数可以读取外部函数中定义的不可变变量（如整数、字符串、元组等），但不能直接修改它们。如果尝试修改，Python会在嵌套函数的局部作用域内创建一个同名的新变量，而不是修改外部函数的变量。这是因为不可变变量不能被更改，只能被替换。</p><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">Copy code<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    x = <span class="hljs-number">3</span>  <span class="hljs-comment"># 不可变变量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 可以访问外部函数的变量x</span><br>    inner()<br><br>outer()<br></code></pre></td></tr></table></figure><h3 id="修改可变变量"><a href="#修改可变变量" class="headerlink" title="修改可变变量"></a>修改可变变量</h3><p>对于可变变量（如列表、字典等），嵌套函数可以修改这些变量的内容，因为可变变量允许原地修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">Copy code<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    lst = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]  <span class="hljs-comment"># 可变变量</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        lst.append(<span class="hljs-number">4</span>)  <span class="hljs-comment"># 修改外部函数的变量lst</span><br>    inner()<br>    <span class="hljs-built_in">print</span>(lst)<br><br>outer()<br></code></pre></td></tr></table></figure><h3 id="使用nonlocal关键字"><a href="#使用nonlocal关键字" class="headerlink" title="使用nonlocal关键字"></a>使用nonlocal关键字</h3><p>如果需要在嵌套函数中修改外部函数的不可变变量，可以使用nonlocal关键字。这样做可以明确地告诉Python解释器你打算修改的是嵌套作用域中的变量，而不是创建一个新的局部变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">python<br>Copy code<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">outer</span>():<br>    x = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">inner</span>():<br>        <span class="hljs-keyword">nonlocal</span> x<br>        x = <span class="hljs-number">5</span>  <span class="hljs-comment"># 修改的是外部函数的变量x</span><br>    inner()<br>    <span class="hljs-built_in">print</span>(x)  <span class="hljs-comment"># 输出5</span><br><br>outer()<br></code></pre></td></tr></table></figure><p>在这个示例中，nonlocal关键字使得inner函数能够修改外部函数outer中定义的不可变变量x的值。<br>总结来说，嵌套函数能够访问父函数中定义的所有变量，无论它们是可变的还是不可变的。但要修改不可变变量，需要使用nonlocal关键字。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>修改不可变复杂一点……<br>修改可变，不用加入函数参数直接改！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">my_list = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">modify_list</span>():<br>    my_list.append(<span class="hljs-number">4</span>)<br><br>modify_list()<br><span class="hljs-built_in">print</span>(my_list)  <span class="hljs-comment"># 输出 [1, 2, 3, 4]</span><br><br></code></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="lambda"><a href="#lambda" class="headerlink" title="lambda"></a><code>lambda</code></h3><p>在python种,<code>lambda</code>函数后面可以跟一个列表或任何其他类型的表达式。<code>lambda</code>函数是一个简单的匿名函数，可以接受任何任何数量的参数，但只有一个表达式，这个表达式的就算结果就是函数的返回值。<br>例如：</p><ul><li>排序字典的时候，lambda接受两个参数 <code>item = [k, v]</code>,然后返回一个参数<code>item[1]</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sorted_dict_by_value = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">sorted</span>(my_dict.items(), key=<span class="hljs-keyword">lambda</span> item: item[<span class="hljs-number">1</span>]))<br></code></pre></td></tr></table></figure></li><li>按值排序索引的时候,接受一个参数，返回一个列表里面两个参数<ul><li>这里的 lambda 函数对于每个元素 x（在这个上下文中，x 是 lst 中的一个元素，即一个索引）返回一个由两个元素组成的列表：nums[x] 和 x。</li><li>这个返回的列表用作排序的键：<ul><li>第一个元素 nums[x] 是主要的排序依据。</li><li>第二个元素 x 作为次要排序依据，确保在 nums[x] 相同的情况下，索引较小的元素排在前面。</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sort_lst = <span class="hljs-built_in">sorted</span>(lst, key=<span class="hljs-keyword">lambda</span> x: [nums[x], x])<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">my_dict = &#123;<span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>sorted_dict = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">sorted</span>(my_dict.items()))<br><br>my_dict = &#123;<span class="hljs-string">&#x27;b&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;a&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;c&#x27;</span>: <span class="hljs-number">3</span>&#125;<br>sorted_dict_by_value = <span class="hljs-built_in">dict</span>(<span class="hljs-built_in">sorted</span>(my_dict.items(), key=<span class="hljs-keyword">lambda</span> item: item[<span class="hljs-number">1</span>]))<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#升序</span><br>sorted_index = <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(nums)), key = nums.__getitem__)<br><span class="hljs-comment">#升序</span><br>sorted_index = [i <span class="hljs-keyword">for</span> i, _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(<span class="hljs-built_in">enumerate</span>(nums), key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">1</span>])]<br><span class="hljs-comment">#升序</span><br>nums_index = [[num, i] <span class="hljs-keyword">for</span>  i, num <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(nums)]<br>sorted_index = [i <span class="hljs-keyword">for</span> num, i <span class="hljs-keyword">in</span> <span class="hljs-built_in">sorted</span>(nums_index, key = <span class="hljs-keyword">lambda</span> x : x[<span class="hljs-number">0</span>])]<br><br><span class="hljs-comment">#根据列表nums中的值和索引对一个索引列表lst进行排序。</span><br><span class="hljs-comment">#根据nums中的值降序排序，如果有值相同，则根据索引降序排序。</span><br>n = <span class="hljs-built_in">len</span>(nums)<br>lst = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n)) <span class="hljs-comment">#创建一个从0到n-1的索引列表，这个列表将被排序。</span><br>lst.sort(key=<span class="hljs-keyword">lambda</span> x: [-nums[x], -x])<br><span class="hljs-comment">#对lst进行就地排序（即排序后的结果直接修改lst）</span><br><span class="hljs-comment">#对于lst中的每一个元素x（这里的x是一个索引），lambda函数返回一个由两部分组成的列表[-nums[x], -x]。</span><br><span class="hljs-comment">#第一关键字 -nums[x]</span><br><span class="hljs-comment">#第二关键字 -x</span><br><br><br><span class="hljs-comment">#升序</span><br>n = <span class="hljs-built_in">len</span>(nums)<br>lst = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n))<br>sort_lst = <span class="hljs-built_in">sorted</span>(lst, key = <span class="hljs-keyword">lambda</span> x: nums[x])<br><span class="hljs-comment">#sorted() 函数返回一个新列表，这个列表是按照 key 参数指定的方法排序的 lst 的副本。</span><br>sort_lst = <span class="hljs-built_in">sorted</span>(lst, key = <span class="hljs-keyword">lambda</span> x: [nums[x], x])<br></code></pre></td></tr></table></figure><ul><li><code>sort_lst = sorted(lst, key=lambda x: nums[x]):</code><br>这个表达式根据 <code>nums</code> 中每个索引 x 对应的值对 <code>lst</code> 进行排序。如果 nums 中存在相同的值，那么它们对应的索引在 <code>sort_lst</code> 中的相对顺序将按照它们在原列表 <code>lst</code> 中的顺序，也就是说，排序是稳定的。</li><li><code>sort_lst = sorted(lst, key=lambda x: [nums[x], x]):</code><br>这个表达式在排序时考虑了两个因素：首先是 nums 中每个索引 x 对应的值，其次是索引 <code>x</code> 本身。这意味着，如果 <code>nums</code> 中有两个或多个相同的值，它们将进一步按照它们的索引进行排序。这种方法确保了即使在 <code>nums</code> 中的值相等时，排序结果也是确定的，因为索引值是唯一的。</li></ul><h2 id="accumulate"><a href="#accumulate" class="headerlink" title="accumulate"></a>accumulate</h2><p>内置前缀和</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> itertools <br><span class="hljs-keyword">import</span> operator<br>data = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>]<br><span class="hljs-comment"># 计算前缀和</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(itertools.accumulate(data)))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(accumulate(data)))<br><span class="hljs-comment"># 计算到当前位置累积相乘得结果</span><br>data = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(itertools.accumulate(data, operator.mul, initial=<span class="hljs-number">2</span>)))<br><span class="hljs-comment"># 计算到当前位置的最大值并且输出</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">list</span>(itertools.accumulate(data, <span class="hljs-built_in">max</span>)))<br></code></pre></td></tr></table></figure><h2 id="enumerate"><a href="#enumerate" class="headerlink" title="enumerate"></a>enumerate</h2><p>在Python中，enumerate 是一个内置函数，用于将一个可迭代的（比如列表、元组、字符串等）组合成一个索引序列，通常用于在for循环中获取每个元素的索引和值。这样可以在遍历时同时获得每个元素的索引位置和对应的值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(iterable, start=<span class="hljs-number">0</span>):<br>    <span class="hljs-built_in">print</span>(index, value)<br><span class="hljs-comment">#这里的 iterable 是你想要遍历的可迭代对象，start 是一个可选参数，表示索引的起始值，默认为0。</span><br><span class="hljs-comment"># 下面是一个具体的例子：</span><br><br>my_list = [<span class="hljs-string">&#x27;apple&#x27;</span>, <span class="hljs-string">&#x27;banana&#x27;</span>, <span class="hljs-string">&#x27;cherry&#x27;</span>]<br><br><span class="hljs-comment"># 使用enumerate遍历列表</span><br><span class="hljs-keyword">for</span> index, value <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(my_list):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Index: <span class="hljs-subst">&#123;index&#125;</span>, Value: <span class="hljs-subst">&#123;value&#125;</span>&quot;</span>)<br><br><br>Index: <span class="hljs-number">0</span>, Value: apple<br>Index: <span class="hljs-number">1</span>, Value: banana<br>Index: <span class="hljs-number">2</span>, Value: cherry<br><br></code></pre></td></tr></table></figure><p>使用 enumerate 可以使代码更加清晰和简洁，特别是当你需要索引和值时。</p><h3 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h3><h4 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">g = defaultdict(<span class="hljs-built_in">list</span>)<br><span class="hljs-keyword">while</span> x, y <span class="hljs-keyword">in</span> deges:<br>    g[x].append(y)<br>    g[y].adppen(x)<br><br><span class="hljs-keyword">while</span> x, y, d <span class="hljs-keyword">in</span> deges():<br>    g[x].append((y, d))<br>    g[y].append((x, d))<br></code></pre></td></tr></table></figure><h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 数组</span><br>p = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x != p[x]:<br>        p[x] = find(p[x])<br>    <span class="hljs-keyword">return</span> p[x]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">x, y</span>):<br>    px = find(x)<br>    py = find(y)<br>    <span class="hljs-keyword">if</span> px != py:<br>        p[px] = p[py]<br><br><span class="hljs-comment"># 增加联通分量的大小，联通分量的数量</span><br><br>p = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(n))  <span class="hljs-comment"># 父节点数组</span><br>size = [<span class="hljs-number">1</span>] * n  <span class="hljs-comment"># 连通分量大小数组，初始时每个连通分量大小为1</span><br>num_components = n  <span class="hljs-comment"># 初始时每个节点自成一个连通分量，所以总数为n</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">if</span> x != p[x]:<br>        p[x] = find(p[x])  <span class="hljs-comment"># 路径压缩</span><br>    <span class="hljs-keyword">return</span> p[x]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">merge</span>(<span class="hljs-params">x, y</span>):<br>    px = find(x)<br>    py = find(y)<br>    <span class="hljs-keyword">if</span> px != py:  <span class="hljs-comment"># 只有当两个节点属于不同的连通分量时，才进行合并</span><br>        <span class="hljs-keyword">global</span> num_components<br>        <span class="hljs-keyword">if</span> size[px] &lt; size[py]:  <span class="hljs-comment"># 将较小的连通分量合并到较大的连通分量</span><br>            p[px] = py  <span class="hljs-comment"># 更新父节点</span><br>            size[py] += size[px]  <span class="hljs-comment"># 更新连通分量的大小</span><br>        <span class="hljs-keyword">else</span>:<br>            p[py] = px<br>            size[px] += size[py]<br>        num_components -= <span class="hljs-number">1</span>  <span class="hljs-comment"># 减少连通分量的总数</span><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">UnionFind</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n</span>):<br>        self.root = [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>        self.size = [<span class="hljs-number">1</span>]*n<br>        self.part = n<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">find</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-keyword">if</span> x != self.root[x]:<br>            <span class="hljs-comment"># 在查询的时候合并到顺带直接根节点</span><br>            root_x = self.find(self.root[x])<br>            self.root[x] = root_x<br>            <span class="hljs-keyword">return</span> root_x<br>        <span class="hljs-keyword">return</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">union</span>(<span class="hljs-params">self, x, y</span>):<br>        root_x = self.find(x)<br>        root_y = self.find(y)<br>        <span class="hljs-keyword">if</span> root_x == root_y:<br>            <span class="hljs-keyword">return</span><br>        <span class="hljs-keyword">if</span> self.size[root_x] &gt;= self.size[root_y]:<br>            root_x, root_y = root_y, root_x<br>        self.root[root_x] = root_y<br>        self.size[root_y] += self.size[root_x]<br>        <span class="hljs-comment"># 将非根节点的秩赋0</span><br>        self.size[root_x] = <span class="hljs-number">0</span><br>        self.part -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">is_connected</span>(<span class="hljs-params">self, x, y</span>):<br>        <span class="hljs-keyword">return</span> self.find(x) == self.find(y)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_root_part</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 获取每个根节点对应的组</span><br>        part = defaultdict(<span class="hljs-built_in">list</span>)<br>        n = <span class="hljs-built_in">len</span>(self.root)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            part[self.find(i)].append(i)<br>        <span class="hljs-keyword">return</span> part<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_root_size</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 获取每个根节点对应的组大小</span><br>        size = defaultdict(<span class="hljs-built_in">int</span>)<br>        n = <span class="hljs-built_in">len</span>(self.root)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>            size[self.find(i)] = self.size[self.find(i)]<br>        <span class="hljs-keyword">return</span> size<br></code></pre></td></tr></table></figure><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">quick_pow</span>(<span class="hljs-params">a, b, mod</span>):<span class="hljs-comment">#快速幂</span><br>    res = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> b:<br>        <span class="hljs-keyword">if</span> b &amp; <span class="hljs-number">1</span>:<br>            res = res * a % mod<br>        a = a * a % mod<br>        b &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">inverse</span>(<span class="hljs-params">a, mod</span>): <span class="hljs-comment">#求逆元</span><br>    <span class="hljs-keyword">return</span> quick_pow(a, mod - <span class="hljs-number">2</span>, mod)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> a <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> gcd(b, a % b)<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">sieve</span>(<span class="hljs-params">n</span>):<br>    primes = []<br>    st = [<span class="hljs-number">0</span>] * (n + <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, n + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> st[i]:<br>            primes.append(i)<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i * i, n + <span class="hljs-number">1</span>, i):<br>            st[j] = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> primes<br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">n</span>):<br>    <span class="hljs-keyword">if</span> n &lt; <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    i = <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> i &lt;=n // i:<br>        <span class="hljs-keyword">if</span> n % i == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>用Python编码更简单：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">n = int(input()) <br>s = 1 <br>ans = 0<br>for i in range(1,n+1,1):    <br>    s *= i<br>    ans += s <br>print(ans)<br></code></pre></td></tr></table></figure><h2 id="C-2-构造随机数和随机字符串"><a href="#C-2-构造随机数和随机字符串" class="headerlink" title="C.2 构造随机数和随机字符串"></a>C.2 构造随机数和随机字符串</h2><p>用Python构造测试数据，比c++简单得多。它能直接产生极大的数字，方便地产生随机字符等。下<br>（1）导入库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br></code></pre></td></tr></table></figure><p>可以写成：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br></code></pre></td></tr></table></figure><p>此时后面的代码能够简单一点，例如把<code>random.randint</code>直接写为<code>randint</code><br>（2）在指定范围内生成一个很大的随机整数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> (random.randint(-<span class="hljs-number">9999999999999999</span>,<span class="hljs-number">9999999999999999</span>))<br></code></pre></td></tr></table></figure><p>输出示例：428893995939258<br>（3）在指定范围内（0到100000）生成一个随机偶数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> (random.randrange(<span class="hljs-number">0</span>, <span class="hljs-number">100001</span>, <span class="hljs-number">2</span>))<br></code></pre></td></tr></table></figure><p>输出示例：14908<br>（4）生成一个0到1之间的随机浮点数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> (random.random())<br></code></pre></td></tr></table></figure><p>输出示例：0.2856636141181378<br>（5）在指定范围内（1到20）生成一个随机浮点数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> (random.uniform(<span class="hljs-number">1</span>, <span class="hljs-number">20</span>))<br></code></pre></td></tr></table></figure><p>输出示例：9.81984258258233<br>（6）在指定字符中生成一个随机字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> (random.choice(<span class="hljs-string">&#x27;abcdefghijklmnopqrst@#$%^&amp;*()&#x27;</span>))<br></code></pre></td></tr></table></figure><p>输出示例：d<br>（7）在指定字符中生成指定数量的随机字符：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> (random.sample(<span class="hljs-string">&#x27;zyxwvutsrqponmlkjihgfedcba&#x27;</span>,<span class="hljs-number">5</span>))<br></code></pre></td></tr></table></figure><p>输出示例：[‘z’, ‘u’, ‘x’, ‘w’, ‘j’]<br>（8）导入库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<br></code></pre></td></tr></table></figure><p>若写成<code>from string import *</code>，下面的<code>string.ascii_letters</code>改为<code>ascii_letters</code><br>（9）用a-z、A-Z、0-9生成指定数量的随机字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ran_str = <span class="hljs-string">&#x27;&#x27;</span>.join(random.sample(string.ascii_letters + string.digits, <span class="hljs-number">8</span>))<br><span class="hljs-built_in">print</span> (ran_str)<br></code></pre></td></tr></table></figure><p>输出示例：iCTm6yxN<br>（10）从多个字符中选取指定数量的字符组成新字符串：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span> (<span class="hljs-string">&#x27;&#x27;</span>.join(random.sample([<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>], <span class="hljs-number">5</span>)))<br></code></pre></td></tr></table></figure><p>输出示例：mjlhd<br>（11）打乱数组的顺序：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">items = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]   <br>random.shuffle(items)<br>for i in range(0,len(items),1):      #逐个打印<br>   print (items[i],&quot; &quot;,end=&#x27;&#x27;)<br></code></pre></td></tr></table></figure><p>输出示例：1 0 8 3 5 7 9 4 6 2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint, uniform<br><span class="hljs-keyword">import</span> subprocess<br><br>T = <span class="hljs-number">10</span> <span class="hljs-comment"># 样例组数</span><br><br><span class="hljs-comment"># 生成随机数据的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_date</span>():<br>     A = [<span class="hljs-number">0</span>] * <span class="hljs-number">1010</span><br>     <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, T + <span class="hljs-number">1</span>):<br>          <span class="hljs-comment"># 数据的文件名</span><br>          filename = <span class="hljs-string">f&quot;in_<span class="hljs-subst">&#123;t&#125;</span>.txt&quot;</span><br>          <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>               n = randint(<span class="hljs-number">1</span>, <span class="hljs-number">1000</span>)<br>               k = randint(<span class="hljs-number">1</span>, n)<br>               file.write(<span class="hljs-built_in">str</span>(n)+ <span class="hljs-string">&quot; &quot;</span> + <span class="hljs-built_in">str</span>(k) + <span class="hljs-string">&quot;\n&quot;</span>)<br>               <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>                    A[i] = randint(<span class="hljs-number">0</span>, <span class="hljs-number">100</span>)<br>               nums = <span class="hljs-string">&quot; &quot;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, A[:n]))<br>               file.write(nums + <span class="hljs-string">&quot;\n&quot;</span>)<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;generate_ok:......<span class="hljs-subst">&#123;T&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># 调用py程序函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">process_name</span>):<br>     <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, T + <span class="hljs-number">1</span>):<br>          <span class="hljs-comment"># 文件名</span><br>          out_filename = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;process_name&#125;</span>_out_<span class="hljs-subst">&#123;t&#125;</span>.txt&quot;</span><br>          in_filename = <span class="hljs-string">f&quot;in_<span class="hljs-subst">&#123;t&#125;</span>.txt&quot;</span><br>          subprocess.run([<span class="hljs-string">&#x27;python&#x27;</span>, <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;process_name&#125;</span>.py&#x27;</span>],<br>                         stdin = <span class="hljs-built_in">open</span>(in_filename, <span class="hljs-string">&quot;r&quot;</span>),<br>                         stdout = <span class="hljs-built_in">open</span>(out_filename, <span class="hljs-string">&quot;w&quot;</span>))<br>     <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;run_<span class="hljs-subst">&#123;process_name&#125;</span>_ok:......<span class="hljs-subst">&#123;T&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># 对比txt文件是否相同的函数</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">diff</span>(<span class="hljs-params">file1, file2</span>):<br>     <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, T + <span class="hljs-number">1</span>):<br>          f1 = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;file1&#125;</span>_out_<span class="hljs-subst">&#123;t&#125;</span>.txt&quot;</span><br>          f2 = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;file2&#125;</span>_out_<span class="hljs-subst">&#123;t&#125;</span>.txt&quot;</span><br>          <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(f1, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> s, <span class="hljs-built_in">open</span>(f2, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> ss:<br>               lines1 = s.readlines()<br>               lines2 = ss.readlines()<br>               <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(lines1) != <span class="hljs-built_in">len</span>(lines2):<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;t&#125;</span>:lines error&#x27;</span>)<br>                    <span class="hljs-keyword">continue</span><br>               ok = <span class="hljs-number">1</span><br>               <span class="hljs-keyword">for</span> line1,line2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(lines1, lines2):<br>                    <span class="hljs-keyword">if</span> line1 != line2:<br>                         <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;t&#125;</span>:exist error&#x27;</span>)<br>                         ok = <span class="hljs-number">0</span><br>                         <span class="hljs-keyword">break</span><br>               <span class="hljs-keyword">if</span> ok: <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;t&#125;</span>:ok&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    <span class="hljs-comment"># 生成输入文件</span><br>    generate_date()<br><br>    <span class="hljs-comment"># 调用正解</span><br>    file_true = <span class="hljs-string">&quot;True&quot;</span><br>    run(file_true)<br><br>    <span class="hljs-comment"># 调用测试程序</span><br>    file_my = <span class="hljs-string">&quot;A&quot;</span><br>    run(file_my)<br><br>    <span class="hljs-comment"># 调用对比程序</span><br>    diff(file_true, file_my)<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo</title>
      <link href="/post/ab21860c.html"/>
      <url>/post/ab21860c.html</url>
      
        <content type="html"><![CDATA[<h1 id="发表文章"><a href="#发表文章" class="headerlink" title="发表文章"></a>发表文章</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo new &quot;name&quot;<br></code></pre></td></tr></table></figure><p>这篇文章会出现在&#x2F;source&#x2F;_post&#x2F;</p><h1 id="发表page"><a href="#发表page" class="headerlink" title="发表page"></a>发表page</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo page &quot;name&quot;<br></code></pre></td></tr></table></figure><h1 id="修改完毕之后在本地查看效果"><a href="#修改完毕之后在本地查看效果" class="headerlink" title="修改完毕之后在本地查看效果"></a>修改完毕之后在本地查看效果</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo clean<br>hexo generate<br>hexo cl &amp;&amp; hexo g<br>hexo serve<br></code></pre></td></tr></table></figure><h1 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">hexo d <br></code></pre></td></tr></table></figure><p>需要输入ssh密码</p><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="彩色标签云"><a href="#彩色标签云" class="headerlink" title="彩色标签云"></a>彩色标签云</h3><p>在<code>config.yal</code>中将<code>aside</code>中的<code>card_tags</code>的<code>enable</code>设置为<code>true</code>即可</p><h3 id="用giscus实现评论"><a href="#用giscus实现评论" class="headerlink" title="用giscus实现评论"></a>用<code>giscus</code>实现评论</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">待整理<br></code></pre></td></tr></table></figure><h3 id="实现鼠标彩色"><a href="#实现鼠标彩色" class="headerlink" title="实现鼠标彩色"></a>实现鼠标彩色</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">待整理<br></code></pre></td></tr></table></figure><h3 id="社交信息"><a href="#社交信息" class="headerlink" title="社交信息"></a>社交信息</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">social:</span><br>  <span class="hljs-attr">fab fa-github:</span>  <span class="hljs-string">&quot;填入github主页&quot;</span><span class="hljs-string">||</span> <span class="hljs-string">Github</span> <span class="hljs-string">||</span> <span class="hljs-string">&#x27;#24292e&#x27;</span><br>  <span class="hljs-attr">fas fa-envelope:</span>  <span class="hljs-string">mailto:&quot;邮箱&quot;</span> <span class="hljs-string">||</span> <span class="hljs-string">Email</span> <span class="hljs-string">||</span> <span class="hljs-string">&#x27;#4a7dbe&#x27;</span><br>  <span class="hljs-attr">fab fa-qq: fab fa-qq:</span> <span class="hljs-string">tencent://AddContact/?fromId=45&amp;fromSubId=1&amp;subcmd=all&amp;uin=&quot;QQ号👌&quot;&amp;website=www.oicqzone.com</span> <span class="hljs-string">||</span> <span class="hljs-string">QQ</span> <span class="hljs-string">||</span> <span class="hljs-string">&#x27;#qq-color-code&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="背景图片and渐变"><a href="#背景图片and渐变" class="headerlink" title="背景图片and渐变"></a>背景图片and渐变</h3><p><strong>⚠️：先在<code>config.butterfly.yaml</code>中将<code>backgroud</code>设一个图片 <code>url()</code><br>网上都没有这一步<br>但我试了好多次，只加个<code>css</code>不出现图片，不知道为什么</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">background:  url(https://picx.zhimg.com/80/v2-7ee6f104979814d2bf420461e3872475_1440w.webp?source=1def8aca)<br>写css<br>然后inject<br></code></pre></td></tr></table></figure><h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">写css<br>然后inject<br></code></pre></td></tr></table></figure><h2 id="目前还不会的"><a href="#目前还不会的" class="headerlink" title="目前还不会的"></a>目前还不会的</h2><h3 id="2024-1-11"><a href="#2024-1-11" class="headerlink" title="2024.1.11"></a>2024.1.11</h3><ul><li><input disabled="" type="checkbox"> <code>giscus</code>不会将评论顺序默认改成最新的</li><li><input disabled="" type="checkbox"> 最新留言or评论不会弄到右边</li><li><input checked="" disabled="" type="checkbox"> 将评论在某些page不显示</li><li><input checked="" disabled="" type="checkbox"> 文章背景虚化   2024.1.22完成</li></ul><h3 id="待做"><a href="#待做" class="headerlink" title="待做"></a>待做</h3><ul><li><input disabled="" type="checkbox"> <code>about</code>完善</li></ul><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><h4 id="用picgo-app："><a href="#用picgo-app：" class="headerlink" title="用picgo app："></a>用<code>picgo</code> app：</h4><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240301205606.png"><br>从粘贴板上传图片快捷键：<code>ctrl+shift+p</code></p><h4 id="用vscode-markdowm-picgo-插件"><a href="#用vscode-markdowm-picgo-插件" class="headerlink" title="用vscode + markdowm + picgo(插件)"></a>用vscode + markdowm + picgo(插件)</h4><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240123001458.png" alt="20240123001458"><br><code>cdn</code>加速<br><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240123001522.png" alt="20240123001522"><br>从粘贴板上传图片快捷键：<code>artl+shift+u</code></p><h4 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a><code>Typora</code></h4><p>文件-&gt;偏好设置-&gt;图像</p><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240301205545.png"></p><p><img src="https://cdn.jsdelivr.net/gh/wawzysys/imgbed@main/20240301205518.png"></p><p>点击<strong>验证图片上传选项</strong>查看是否配置好</p><h3 id="git-子仓库："><a href="#git-子仓库：" class="headerlink" title="git 子仓库："></a>git 子仓库：</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git">cd themes/butterfly<br>git add .<br>git commit -m &quot;update&quot;<br>cd ../../<br>git add themes/butterfly<br>git commit -m &quot;update&quot;<br>git push origin hexo<br></code></pre></td></tr></table></figure><h3 id="将ssh代理改为https"><a href="#将ssh代理改为https" class="headerlink" title="将ssh代理改为https"></a>将ssh代理改为https</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">temp<br></code></pre></td></tr></table></figure><h3 id="可以单独将public上传到github仓库，不用hexo-d"><a href="#可以单独将public上传到github仓库，不用hexo-d" class="headerlink" title="可以单独将public上传到github仓库，不用hexo d"></a>可以单独将public上传到github仓库，不用<code>hexo d</code></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">temp<br></code></pre></td></tr></table></figure><h3 id="副标题"><a href="#副标题" class="headerlink" title="副标题"></a>副标题</h3><p>在’_config.yaml’里面更改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">title:</span> <span class="hljs-string">asdaso的blog</span><br><span class="hljs-attr">subtitle:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br><br>  <span class="hljs-attr">sub:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">何其荣幸</span> <span class="hljs-string">何德何能</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">所有的不平凡都来自平凡</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;cs&#x27;</span><br><span class="hljs-attr">keywords:</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">asdaso</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h3 id="封面不显示正文"><a href="#封面不显示正文" class="headerlink" title="封面不显示正文"></a>封面不显示正文</h3><p><code>method</code>选择1表示显示介绍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">index_post_content:<br>  method: 1  #description<br>  length: 500 # if you set method to 2 or 3, the length need to config<br></code></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一个博客</title>
      <link href="/post/61585.html"/>
      <url>/post/61585.html</url>
      
        <content type="html"><![CDATA[<h2 id="VSC换python内核"><a href="#VSC换python内核" class="headerlink" title="VSC换python内核"></a>VSC换python内核</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">ctrl + shift + p<br>Select Interpreter<br></code></pre></td></tr></table></figure><h2 id="将mackdown转化为别的格式"><a href="#将mackdown转化为别的格式" class="headerlink" title="将mackdown转化为别的格式"></a>将mackdown转化为别的格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">下载markdown pdf 插件<br>ctrl + shife + p <br>输入 markdown pdf<br></code></pre></td></tr></table></figure><h2 id="解决markdown-pdf-不能输出latex公式问题"><a href="#解决markdown-pdf-不能输出latex公式问题" class="headerlink" title="解决markdown pdf 不能输出latex公式问题"></a>解决markdown pdf 不能输出latex公式问题</h2><p>在下面路径打开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html">C://Users/<span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span>/.vscode/extensions/yzane.markdown-pdf-1.4.1/template/template.html<br></code></pre></td></tr></table></figure><p>在最后的body和html之间输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&lt;script type=&quot;text/javascript&quot; src=&quot;http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML&quot;&gt;&lt;/script&gt;<br>&lt;script type=&quot;text/x-mathjax-config&quot;&gt; MathJax.Hub.Config(&#123; tex2jax: &#123;inlineMath: [[&#x27;$&#x27;, &#x27;$&#x27;]]&#125;, messageStyle: &quot;none&quot; &#125;);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>参考：<br><a href="https://blog.csdn.net/qq_18506419/article/details/103461825">VScode中Markdown PDF无法正确输出包含公式的pdf解决方案</a></p><h3 id="常用cmd命令"><a href="#常用cmd命令" class="headerlink" title="常用cmd命令"></a>常用cmd命令</h3><h4 id="删除-exe"><a href="#删除-exe" class="headerlink" title="删除.exe"></a>删除.exe</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">在文件下的<span class="hljs-built_in">cmd</span>输入：<br><span class="hljs-keyword">for</span> /r %i <span class="hljs-keyword">in</span> (*.exe) <span class="hljs-keyword">do</span> <span class="hljs-built_in">del</span> /q %i<br></code></pre></td></tr></table></figure><pre><code></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 编程 </tag>
            
            <tag> 计算机科学 </tag>
            
            <tag> 技术 </tag>
            
            <tag> VSCODE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
